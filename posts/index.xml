<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ween&#39;s Blog</title>
    <link>https://weenable.github.io/posts/</link>
    <description>Recent content in Posts on Ween&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 19:24:41 +0800</lastBuildDate>
    <atom:link href="https://weenable.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序算法汇总</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 28 Feb 2025 19:24:41 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h6 class=&#34;heading&#34; id=&#34;冒泡排序n2&#34;&gt;&#xA;  冒泡排序n^2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8fn2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;bubbleSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;done := &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list) - 1; i &amp;gt;= 0; i-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;done = &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := 0; j &amp;lt; i; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;gt; list[j+1] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;list[j], list[j+1] = list[j], list[j+1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;done = &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; done {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;选择排序n2&#34;&gt;&#xA;  选择排序n^2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8fn2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;selectSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list) - 1; i &amp;gt;= 0; i-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;maxIdx := 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := 1; j &amp;lt;= i; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;gt; list[maxIdx] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;maxIdx = j&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;list[maxIdx], list[i] = list[i], list[maxIdx]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;插入排序n2&#34;&gt;&#xA;  插入排序n^2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8fn2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;insertSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list); i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := i; j &amp;gt; 0; j-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;lt; list[j-1] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;list[j], list[j-1] = list[j-1], list[j]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;归并排序nlgn&#34;&gt;&#xA;  归并排序nlgn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8fnlgn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mergeSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;merge := &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(l, r []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i, j := 0, 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(l) &amp;amp;&amp;amp; j &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; l[i] &amp;lt; r[j] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, l[i])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;i++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;} &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, r[j])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;j++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(l) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, l[i:]...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; j &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, r[j:]...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; dm &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;dm = &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(ls []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(ls) == 1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ls&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ll := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dm&lt;/span&gt;(ls[:&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(ls)/2])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;lr := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dm&lt;/span&gt;(ls[&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(ls)/2:])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;merge&lt;/span&gt;(ll, lr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dm&lt;/span&gt;(list)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;快速排序nlgn&#34;&gt;&#xA;  快速排序nlgn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8fnlgn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;quickSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;part := &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(l, r &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;pv := list[r]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i := l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := l; j &amp;lt; r; j++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;lt; pv {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;list[i], list[j] = list[j], list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;i++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;list[i], list[r] = list[r], list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; df &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;df = &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(l, r &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; l &amp;gt;= r {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;p := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;part&lt;/span&gt;(l, r)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;df&lt;/span&gt;(l, p-1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;df&lt;/span&gt;(p+1, r)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;df&lt;/span&gt;(0, &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list)-1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;堆排序nlgn&#34;&gt;&#xA;  堆排序nlgn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a0%86%e6%8e%92%e5%ba%8fnlgn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;heapSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;minHeap := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 建堆，上浮&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;range&lt;/span&gt; list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;minHeap = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(minHeap, v)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;j := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) - 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j &amp;gt; 0 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;parent := (j - 1) / 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; v &amp;gt;= minHeap[parent] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;minHeap[j] = minHeap[parent]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;j = parent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 取值，下沉&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;range&lt;/span&gt; minHeap {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 取堆顶&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, minHeap[0])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 获取最后一个元素，并且挪到堆顶&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;x := minHeap[&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap)-1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;minHeap = minHeap[:&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap)-1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 没有元素了&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) == 0 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 对堆顶元素做下沉操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i := 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;l := 2*i + 1 &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 左孩子&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;r := 2*i + 2 &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 右孩子&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 如果没有左孩子，则停止下沉&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; l &amp;gt;= &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 如果有右孩子，则比较左右孩子得到比较小的孩子下标赋值给l&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; r &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) &amp;amp;&amp;amp; minHeap[l] &amp;gt; minHeap[r] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;l = r&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 如果比最小的孩子还要小，则停止下沉&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; x &amp;lt;= minHeap[l] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 将较小的孩子提升上来&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;minHeap[i] = minHeap[l]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;i = l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;minHeap[i] = x&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;计数排序n&#34;&gt;&#xA;  计数排序n&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e6%95%b0%e6%8e%92%e5%ba%8fn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;countSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;maxNum := list[0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 1; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list)-1; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[i] &amp;gt; maxNum {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;maxNum = list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 记录每个数的数量&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;count := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, maxNum+1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;range&lt;/span&gt; list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;count[v]++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 记录每个数的位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 1; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(count); i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;count[i] += count[i-1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 从后往前遍历，保证稳定性&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list) - 1; i &amp;gt;= 0; i-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;idx := count[list[i]] - 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret[idx] = list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;count[list[i]]--&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>二分查找算法汇总</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 28 Feb 2025 19:23:48 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;二分查找原题&#34;&gt;&#xA;  二分查找原题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e5%8e%9f%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-search/&#34;&gt;https://leetcode.cn/problems/binary-search/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;注意计算mid的时候不要用(left+right) / 2，因为可能会溢出&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func search(nums []int, target int) int {&#xA;    n := len(nums)&#xA;&#xA;    left := 0&#xA;    right := n-1&#xA;    for left &amp;lt;= right {&#xA;        mid := left + ((right - left) / 2)&#xA;        if nums[mid] == target {&#xA;            return mid&#xA;        }&#xA;&#xA;        if nums[mid] &amp;gt; target {&#xA;            right = mid-1&#xA;        } else {&#xA;            left = mid+1&#xA;        }&#xA;    }&#xA;    return -1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;搜索插入位置&#34;&gt;&#xA;  搜索插入位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%90%9c%e7%b4%a2%e6%8f%92%e5%85%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/search-insert-position/&#34;&gt;https://leetcode.cn/problems/search-insert-position/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过二分查找值&lt;/li&gt;&#xA;&lt;li&gt;插入位置默认为数组末尾，如果mid所在的数比target大，则更新插入位置为mid&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func searchInsert(nums []int, target int) int {&#xA;    n := len(nums)&#xA;    left, right := 0, n-1&#xA;    ret := n&#xA;&#xA;    for left &amp;lt;= right {&#xA;        mid := left + ((right - left) / 2)&#xA;        if nums[mid] == target {&#xA;            return mid&#xA;        }&#xA;&#xA;&#x9;&#x9;// 如果mid所在的数比target大，则更新插入位置为mid&#xA;        if nums[mid] &amp;gt; target {&#xA;            right = mid-1&#xA;            ret = mid&#xA;        } else {&#xA;            left = mid + 1&#xA;        }&#xA;&#xA;    }&#xA;    return ret&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;查找元素出现的第一个和最后一个位置&#34;&gt;&#xA;  查找元素出现的第一个和最后一个位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e6%89%be%e5%85%83%e7%b4%a0%e5%87%ba%e7%8e%b0%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%92%8c%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/&#34;&gt;https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>游戏服务器架构演进</title>
      <link>https://weenable.github.io/posts/game/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Fri, 28 Feb 2025 19:21:10 +0800</pubDate>
      <guid>https://weenable.github.io/posts/game/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;游戏服务器要素&#34;&gt;&#xA;  游戏服务器要素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%a6%81%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;对于游戏服务器，三个比较重要的部份就是：CPU、内存、带宽的设计&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;逻辑架构：合适的进程、线程、协程的CPU调度方案，合适的同步或异步编程模型，分区分服或世界服的方式来提高服务器的承载量和稳定性&lt;/li&gt;&#xA;&lt;li&gt;内存架构：合理使用内存，提高承载量，降低服务延迟&lt;/li&gt;&#xA;&lt;li&gt;通信架构：通信协议如UDP/TCP&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;游戏服务器演进&#34;&gt;&#xA;  游戏服务器演进&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%bc%94%e8%bf%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;一弱交互游戏服务器&#34;&gt;&#xA;  一、弱交互游戏服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%bc%b1%e4%ba%a4%e4%ba%92%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;基于http通信模式的服务器，服务器架构和web差不多&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228214121.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-2025228214121.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;二长连接游戏服务器&#34;&gt;&#xA;  二、长连接游戏服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e9%95%bf%e8%bf%9e%e6%8e%a5%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;在长连接中玩家是有状态的，消息传送的频率以及速度都快于弱联网游戏&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;第一代游戏服务器单线程无阻塞&#34;&gt;&#xA;  第一代游戏服务器，单线程无阻塞&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%80%e4%bb%a3%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%8d%95%e7%ba%bf%e7%a8%8b%e6%97%a0%e9%98%bb%e5%a1%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;所有玩家的请求都发到一个无阻塞的消息队列中，由单线程处理消息&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282212369.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282212369.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;线程模型如下：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282223840.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282223840.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;第二代游戏服务器分区分服&#34;&gt;&#xA;  第二代游戏服务器，分区分服&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%ba%8c%e4%bb%a3%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%88%86%e5%8c%ba%e5%88%86%e6%9c%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;单游戏服务器承载用户客户端有限，于是出现分区分服的概念，这种模型中一个游戏服务器就是一个平行世界，在第二代游戏服务器中同时也对进程和线程模型做了升级&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多线程：每个线程处理一个特定的场景内的tick事件，如果玩家跨场景则通过消息投递的方式通知另一个场景线程来进行玩家数据同步&lt;/li&gt;&#xA;&lt;li&gt;多进程：将网络、数据库的操作单独使用进程来处理，逻辑进程专心处理逻辑任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282244672.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282244672.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;第三代游戏服务器世界服&#34;&gt;&#xA;  第三代游戏服务器，世界服&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%89%e4%bb%a3%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%96%e7%95%8c%e6%9c%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;第三代游戏服务器主要是世界服，分为以下几种演化&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三层架构：包含网关服务器、游戏逻辑服务器、DB服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282257901.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282257901.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分片架构：将游戏逻辑服务器再进行分片，分离出如场景服务器、非场景服务器等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282311243.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282311243.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大世界架构：将世界按区块划分，各场景服务器管理不同区块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;三房间服务器游戏大厅&#34;&gt;&#xA;  三、房间服务器，游戏大厅&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e6%88%bf%e9%97%b4%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%b8%b8%e6%88%8f%e5%a4%a7%e5%8e%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;主要分为大厅服务器、匹配服务器、对战服务器&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282323894.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282323894.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于redis的分布式锁实现</title>
      <link>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:19:48 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h4 class=&#34;heading&#34; id=&#34;分布式锁安全和失效保障&#34;&gt;&#xA;  分布式锁安全和失效保障&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81%e5%ae%89%e5%85%a8%e5%92%8c%e5%a4%b1%e6%95%88%e4%bf%9d%e9%9a%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;算法只需要具备3个特性就可以实现最低保障的分布式锁&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;安全属性：独享，任意时刻只有一个客户端持有锁&lt;/li&gt;&#xA;&lt;li&gt;活性A：无死锁，即便持有锁客户端崩溃或网络分裂，锁仍然可以被获取&lt;/li&gt;&#xA;&lt;li&gt;活性B：容错，只要大部分redis节点存活，客户端即可获取和释放锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;单redis实例实现&#34;&gt;&#xA;  单redis实例实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95redis%e5%ae%9e%e4%be%8b%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用锁命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NX 不存在key才执行&lt;/li&gt;&#xA;&lt;li&gt;PX超时&lt;/li&gt;&#xA;&lt;li&gt;random_value随机值，确保可以安全释放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SET name random_value NX PX 3000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;释放锁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if redis.call(&amp;#34;get&amp;#34;,KEYS[1]) == ARGV[1] then&#xA;    return redis.call(&amp;#34;del&amp;#34;,KEYS[1])&#xA;else&#xA;    return 0&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 class=&#34;heading&#34; id=&#34;单实例配合故障转移实现&#34;&gt;&#xA;  单实例配合故障转移实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e5%ae%9e%e4%be%8b%e9%85%8d%e5%90%88%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;在单实例实现中存在单点失败问题，如果增加salve形成主从结构，当主从存在延迟时会导致从并没同步到锁的状态导致安全失效&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;redlock实现&#34;&gt;&#xA;  RedLock实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redlock%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;假设有N个redis master节点，在这种算法情况下客户端获取锁&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;获取当前unix时间戳，单位为毫秒&lt;/li&gt;&#xA;&lt;li&gt;依次尝试从N个实例使用相同的key和随机值获取锁，并且获取锁时设置一个网络超时时间，并且这个时间&amp;lt;锁失效时间&lt;/li&gt;&#xA;&lt;li&gt;客户端使用当前时间减去获取锁时刻时间得到获取锁耗时，只有从大多数节点获取到锁并且使用时间小于锁失效时间，锁才算获取成功&lt;/li&gt;&#xA;&lt;li&gt;锁的真正有效时间是有效时间减去获取锁所使用的时间&lt;/li&gt;&#xA;&lt;li&gt;如果获取锁失败，则应尽快在所有实例上释放锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;redsyncgo&#34;&gt;&#xA;  redsync.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redsyncgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// redsync.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;math/rand&amp;#34;&#xA;&#x9;&amp;#34;time&amp;#34;&#xA;)&#xA;&#xA;// 最小最大延迟重试时间&#xA;const (&#xA;&#x9;minRetryDelayMilliSec = 50&#xA;&#x9;maxRetryDelayMilliSec = 250&#xA;)&#xA;&#xA;type RedSync struct {&#xA;&#x9;pools []*Pool&#xA;}&#xA;&#xA;func New(pool ...*Pool) *RedSync {&#xA;&#x9;return &amp;amp;RedSync{pools: pool}&#xA;}&#xA;&#xA;func (r *RedSync) NewMutex(name string, options ...MutexOption) *Mutex {&#xA;&#x9;m := &amp;amp;Mutex{&#xA;&#x9;&#x9;name:   name,&#xA;&#x9;&#x9;expiry: 8 * time.Second, // 8s过期&#xA;&#x9;&#x9;tries:  32, // 最大重试32次&#xA;&#x9;&#x9;delayFunc: func(tries int) time.Duration {&#xA;&#x9;&#x9;&#x9;return time.Duration(rand.Intn(maxRetryDelayMilliSec-minRetryDelayMilliSec)+minRetryDelayMilliSec) * time.Millisecond&#xA;&#x9;&#x9;}, // 延迟数值计算函数&#xA;&#x9;&#x9;genValueFunc:  genValue, // 随机值生成函数&#xA;&#x9;&#x9;driftFactor:   0.01, // 到达过期时间漂移因子&#xA;&#x9;&#x9;timeoutFactor: 0.05, // 获取锁超时时间漂移因子&#xA;&#x9;&#x9;quorum:        len(r.pools)/2 + 1, // 成功获取到锁的节点数&#xA;&#x9;&#x9;pools:         r.pools, // redis节点池&#xA;&#x9;}&#xA;&#xA;&#x9;for _, o := range options {&#xA;&#x9;&#x9;o(m)&#xA;&#x9;}&#xA;&#xA;&#x9;return m&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;mutexgo&#34;&gt;&#xA;  mutex.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mutexgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// mutex.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;context&amp;#34;&#xA;&#x9;&amp;#34;crypto/rand&amp;#34;&#xA;&#x9;&amp;#34;encoding/base64&amp;#34;&#xA;&#x9;&amp;#34;errors&amp;#34;&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;&#x9;&amp;#34;github.com/hashicorp/go-multierror&amp;#34;&#xA;&#x9;&amp;#34;time&amp;#34;&#xA;)&#xA;&#xA;type Mutex struct {&#xA;&#x9;expiry        time.Duration&#xA;&#x9;name          string&#xA;&#x9;timeoutFactor float64&#xA;&#x9;driftFactor   float64&#xA;&#x9;tries         int&#xA;&#x9;pools         []*Pool&#xA;&#x9;failFast      bool&#xA;&#x9;quorum        int&#xA;&#x9;value         string&#xA;&#x9;until         time.Time&#xA;&#x9;delayFunc     func(int) time.Duration&#xA;&#x9;genValueFunc  func() (string, error)&#xA;}&#xA;&#xA;func (m *Mutex) Unlock() (bool, error) {&#xA;&#x9;return m.UnlockContext(context.Background())&#xA;}&#xA;&#xA;func (m *Mutex) UnlockContext(ctx context.Context) (bool, error) {&#xA;&#x9;n, err := m.actOnPoolAsync(ctx, m.release, m.value)&#xA;&#x9;if n &amp;lt; m.quorum {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;return true, nil&#xA;}&#xA;&#xA;func (m *Mutex) Lock() error {&#xA;&#x9;return m.LockContext(context.Background())&#xA;}&#xA;&#xA;func (m *Mutex) LockContext(ctx context.Context) error {&#xA;&#x9;value, err := m.genValueFunc()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#xA;&#x9;var timer *time.Timer&#xA;&#x9;for i := 0; i &amp;lt; m.tries; i++ {&#xA;&#x9;&#x9;// 重试延迟&#xA;&#x9;&#x9;if i != 0 {&#xA;&#x9;&#x9;&#x9;if timer == nil {&#xA;&#x9;&#x9;&#x9;&#x9;timer = time.NewTimer(m.delayFunc(i))&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;timer.Reset(m.delayFunc(i))&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;select {&#xA;&#x9;&#x9;&#x9;case &amp;lt;-ctx.Done():&#xA;&#x9;&#x9;&#x9;&#x9;timer.Stop()&#xA;&#x9;&#x9;&#x9;&#x9;return ErrFailed&#xA;&#x9;&#x9;&#x9;case &amp;lt;-timer.C:&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;start := time.Now()&#xA;&#xA;&#x9;&#x9;n, err := m.actOnPoolAsync(ctx, m.acquire, value)&#xA;&#xA;&#x9;&#x9;now := time.Now()&#xA;&#x9;&#x9;until := now.Add(m.expiry - now.Sub(start) - time.Duration(int64(float64(m.expiry)*m.driftFactor)))&#xA;&#x9;&#x9;if n &amp;gt;= m.quorum &amp;amp;&amp;amp; now.Before(until) {&#xA;&#x9;&#x9;&#x9;m.value = value&#xA;&#x9;&#x9;&#x9;m.until = until&#xA;&#x9;&#x9;&#x9;return nil&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// 如果没有最终获取锁成功，快速释放掉已经获取的子锁&#xA;&#x9;&#x9;m.actOnPoolAsync(ctx, m.release, value)&#xA;&#xA;&#x9;&#x9;// 达到最大尝试次数，并且有报错，直接返回&#xA;&#x9;&#x9;if i == m.tries-1 &amp;amp;&amp;amp; err != nil {&#xA;&#x9;&#x9;&#x9;return err&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return ErrFailed&#xA;}&#xA;&#xA;// 获取锁&#xA;func (m *Mutex) acquire(ctx context.Context, pool *Pool, value string) (bool, error) {&#xA;&#x9;conn, err := pool.Get(ctx)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;defer conn.Close()&#xA;&#x9;reply, err := conn.SetNX(m.name, value, m.expiry)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;return reply, nil&#xA;}&#xA;&#xA;var deleteScript = NewScript(1, `&#xA;&#x9;local val = redis.call(&amp;#34;GET&amp;#34;, KEYS[1])&#xA;&#x9;if val == ARGV[1] then&#xA;&#x9;&#x9;return redis.call(&amp;#34;DEL&amp;#34;, KEYS[1])&#xA;&#x9;elseif val == false then&#xA;&#x9;&#x9;return -1&#xA;&#x9;else&#xA;&#x9;&#x9;return 0&#xA;&#x9;end&#xA;`)&#xA;&#xA;// 释放锁，通过脚本执行&#xA;func (m *Mutex) release(ctx context.Context, pool *Pool, value string) (bool, error) {&#xA;&#x9;conn, err := pool.Get(ctx)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;defer conn.Close()&#xA;&#x9;status, err := conn.Eval(deleteScript, m.name, value)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#xA;&#x9;if status == int64(-1) {&#xA;&#x9;&#x9;return false, ErrLockAlreadyExpired&#xA;&#x9;}&#xA;&#xA;&#x9;return status != int64(0), nil&#xA;}&#xA;&#xA;// 异步获取各节点的锁&#xA;func (m *Mutex) actOnPoolAsync(ctx context.Context, actFn func(context.Context, *Pool, string) (bool, error), value string) (int, error) {&#xA;&#xA;&#x9;ctx, cancel := context.WithTimeout(ctx, time.Duration(int64(float64(m.expiry)*m.timeoutFactor)))&#xA;&#x9;defer cancel()&#xA;&#xA;&#x9;type result struct {&#xA;&#x9;&#x9;node     int&#xA;&#x9;&#x9;statusOK bool&#xA;&#x9;&#x9;err      error&#xA;&#x9;}&#xA;&#x9;ch := make(chan result, len(m.pools))&#xA;&#x9;for node, pool := range m.pools {&#xA;&#x9;&#x9;go func(node int, pool *Pool) {&#xA;&#x9;&#x9;&#x9;r := result{node: node}&#xA;&#x9;&#x9;&#x9;r.statusOK, r.err = actFn(ctx, pool, value)&#xA;&#x9;&#x9;&#x9;ch &amp;lt;- r&#xA;&#x9;&#x9;}(node, pool)&#xA;&#x9;}&#xA;&#xA;&#x9;n := 0&#xA;&#x9;var err error&#xA;&#x9;taken := make([]int, 0)&#xA;&#xA;&#x9;for range m.pools {&#xA;&#x9;&#x9;r := &amp;lt;-ch&#xA;&#x9;&#x9;if r.statusOK {&#xA;&#x9;&#x9;&#x9;n++&#xA;&#x9;&#x9;} else if r.err == ErrLockAlreadyExpired {&#xA;&#x9;&#x9;&#x9;err = multierror.Append(err, ErrLockAlreadyExpired)&#xA;&#x9;&#x9;} else if r.err != nil {&#xA;&#x9;&#x9;&#x9;err = multierror.Append(err, errors.New(fmt.Sprintf(&amp;#34;redis error, node: %d err: %v&amp;#34;, r.node, r.err)))&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;taken = append(taken, r.node)&#xA;&#x9;&#x9;&#x9;err = multierror.Append(err, errors.New(fmt.Sprintf(&amp;#34;taken error, node: %d err: %v&amp;#34;, r.node, r.err)))&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if m.failFast {&#xA;&#x9;&#x9;&#x9;if n &amp;gt;= m.quorum {&#xA;&#x9;&#x9;&#x9;&#x9;return n, err&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if len(taken) &amp;gt;= m.quorum {&#xA;&#x9;&#x9;&#x9;&#x9;return n, &amp;amp;ErrTaken{Nodes: taken}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;if len(taken) &amp;gt;= m.quorum {&#xA;&#x9;&#x9;return n, &amp;amp;ErrTaken{Nodes: taken}&#xA;&#x9;}&#xA;&#xA;&#x9;return n, err&#xA;}&#xA;&#xA;func genValue() (string, error) {&#xA;&#x9;b := make([]byte, 16)&#xA;&#x9;_, err := rand.Read(b)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return &amp;#34;&amp;#34;, err&#xA;&#x9;}&#xA;&#xA;&#x9;return base64.StdEncoding.EncodeToString(b), nil&#xA;}&#xA;&#xA;type MutexOption func(*Mutex)&#xA;&#xA;func WithExpiry(expiry time.Duration) MutexOption {&#xA;&#x9;return func(m *Mutex) {&#xA;&#x9;&#x9;m.expiry = expiry&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;poolgo&#34;&gt;&#xA;  pool.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#poolgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// pool.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;context&amp;#34;&#xA;&#x9;&amp;#34;github.com/go-redis/redis&amp;#34;&#xA;)&#xA;&#xA;type Pool struct {&#xA;&#x9;redisClient *redis.Client&#xA;}&#xA;&#xA;func NewPool(redisClient *redis.Client) *Pool {&#xA;&#x9;return &amp;amp;Pool{redisClient: redisClient}&#xA;}&#xA;&#xA;func (p *Pool) Get(ctx context.Context) (*Conn, error) {&#xA;&#x9;c := p.redisClient&#xA;&#x9;if ctx != nil {&#xA;&#x9;&#x9;c = c.WithContext(ctx)&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;amp;Conn{c}, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;conngo&#34;&gt;&#xA;  conn.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#conngo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// conn.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;crypto/sha1&amp;#34;&#xA;&#x9;&amp;#34;encoding/hex&amp;#34;&#xA;&#x9;&amp;#34;github.com/go-redis/redis&amp;#34;&#xA;&#x9;&amp;#34;io&amp;#34;&#xA;&#x9;&amp;#34;strings&amp;#34;&#xA;&#x9;&amp;#34;time&amp;#34;&#xA;)&#xA;&#xA;type Conn struct {&#xA;&#x9;redisClient *redis.Client&#xA;}&#xA;&#xA;func (c *Conn) Close() error {&#xA;&#x9;return nil&#xA;}&#xA;&#xA;type Script struct {&#xA;&#x9;KeyCount int&#xA;&#x9;Src      string&#xA;&#x9;Hash     string&#xA;}&#xA;&#xA;func NewScript(keyCount int, src string) *Script {&#xA;&#x9;h := sha1.New()&#xA;&#x9;_, _ = io.WriteString(h, src)&#xA;&#x9;return &amp;amp;Script{&#xA;&#x9;&#x9;KeyCount: keyCount,&#xA;&#x9;&#x9;Src:      src,&#xA;&#x9;&#x9;Hash:     hex.EncodeToString(h.Sum(nil)),&#xA;&#x9;}&#xA;}&#xA;&#xA;func (c *Conn) SetNX(name string, value string, expiry time.Duration) (bool, error) {&#xA;&#x9;ok, err := c.redisClient.SetNX(name, value, expiry).Result()&#xA;&#x9;if err != redis.Nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#xA;&#x9;return ok, nil&#xA;}&#xA;&#xA;// 执行脚本&#xA;func (c *Conn) Eval(script *Script, keysAndArgs ...interface{}) (interface{}, error) {&#xA;&#x9;keys := make([]string, script.KeyCount)&#xA;&#x9;args := keysAndArgs&#xA;&#xA;&#x9;if script.KeyCount &amp;gt; 0 {&#xA;&#x9;&#x9;for i := 0; i &amp;lt; script.KeyCount; i++ {&#xA;&#x9;&#x9;&#x9;keys[i] = keysAndArgs[i].(string)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;args = keysAndArgs[script.KeyCount:]&#xA;&#x9;}&#xA;&#x9;v, err := c.redisClient.EvalSha(script.Hash, keys, args...).Result()&#xA;&#x9;if err != nil &amp;amp;&amp;amp; strings.HasPrefix(err.Error(), &amp;#34;NOSCRIPT&amp;#34;) {&#xA;&#x9;&#x9;v, err = c.redisClient.Eval(script.Src, keys, args...).Result()&#xA;&#x9;}&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#xA;&#x9;return v, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;errorgo&#34;&gt;&#xA;  error.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#errorgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// error.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;errors&amp;#34;&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;)&#xA;&#xA;var ErrFailed = errors.New(&amp;#34;redsync: failed to acquire lock&amp;#34;)&#xA;&#xA;var ErrLockAlreadyExpired = errors.New(&amp;#34;redsync: failed to unlock, lock already expired&amp;#34;)&#xA;&#xA;type ErrTaken struct {&#xA;&#x9;Nodes []int&#xA;}&#xA;&#xA;func (e *ErrTaken) Error() string {&#xA;&#x9;return fmt.Sprintf(&amp;#34;lock already taken, locked nodes: %v&amp;#34;, e.Nodes)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>分布式脑裂</title>
      <link>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E8%84%91%E8%A3%82/</link>
      <pubDate>Fri, 28 Feb 2025 19:18:43 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E8%84%91%E8%A3%82/</guid>
      <description>&lt;h4 class=&#34;heading&#34; id=&#34;脑裂定义&#34;&gt;&#xA;  脑裂定义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%84%91%e8%a3%82%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;一个整体的系统分裂成两个独立的节点，争夺共享资源造成系统混乱&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;出现脑裂的原因&#34;&gt;&#xA;  出现脑裂的原因&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%ba%e7%8e%b0%e8%84%91%e8%a3%82%e7%9a%84%e5%8e%9f%e5%9b%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;主心跳检测超时，导致主备切换，备提供服务后，主又恢复正常，出现双主&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;解决思路&#34;&gt;&#xA;  解决思路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%a3%e5%86%b3%e6%80%9d%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;仲裁机制&#xA;通过设置一个仲裁角色，定时探活主备，但是仲裁者会存在高可用和性能瓶颈&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;授权机制&#xA;假设slave已经提供服务，会有颁发的授权lease，假设master还在提供服务则lease必然是失效的，请求应当是失败的&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;隔离机制&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;共享资源fencing：确保只有一个master往共享存储提供写数据&lt;/li&gt;&#xA;&lt;li&gt;客户端fencing：确保只有一个master可以响应客户端请求&lt;/li&gt;&#xA;&lt;li&gt;slave fencing：确保只有一个master可以向slave下发命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>在线支付系统设计</title>
      <link>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 28 Feb 2025 19:14:00 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;支付系统基本概念&#34;&gt;&#xA;  支付系统基本概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%af%e4%bb%98%e7%b3%bb%e7%bb%9f%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单支付流程&#34;&gt;&#xA;  简单支付流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%94%af%e4%bb%98%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;最简单的支付流程只展示了正向支付的流程，当然还有退款流程、撤销流程等&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281435321.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281435321.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单清结算流程&#34;&gt;&#xA;  简单清结算流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%b8%85%e7%bb%93%e7%ae%97%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;支付系统和上游（如银行）是机构对机构的关系，通常使用清算概念，并且金融机构之间大部份情况下会有独立的清算机构做清算任务&lt;/li&gt;&#xA;&lt;li&gt;支付系统和商户之间通常使用结算概念，由支付系统直接大款给商户&lt;/li&gt;&#xA;&lt;li&gt;清算主要是把钱算清楚，结算主要是真实打款&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281457938.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281457938.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单本对本收单流程&#34;&gt;&#xA;  简单本对本收单流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%9c%ac%e5%af%b9%e6%9c%ac%e6%94%b6%e5%8d%95%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;所谓本对本收单，就是指商户的商品标价币种、向支付系统下单的币种、用户支付的币种、商户结算币种都是同一个币种，不涉及到外汇交易&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281522725.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281522725.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单跨境收单流程&#34;&gt;&#xA;  简单跨境收单流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e8%b7%a8%e5%a2%83%e6%94%b6%e5%8d%95%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;跨境收单就是结算给商户的币种和用户支付的币种不一样，需要经过外汇机构换汇&lt;/li&gt;&#xA;&lt;li&gt;在扣款EUR之后，支付系统会调用外汇机构进行锁定汇率（HA）&lt;/li&gt;&#xA;&lt;li&gt;在银行清算之后，支付平台再调用外汇机构进行换汇（TA）&lt;/li&gt;&#xA;&lt;li&gt;最后支付系统结算给商户&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281556354.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281556354.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;整个时序图如下：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281613881.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281613881.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;概要设计&#34;&gt;&#xA;  概要设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e8%a6%81%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单产品架构图&#34;&gt;&#xA;  简单产品架构图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e4%ba%a7%e5%93%81%e6%9e%b6%e6%9e%84%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281633583.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281633583.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单系统架构图&#34;&gt;&#xA;  简单系统架构图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;较简单的一个本队本交易的支付系统架构&lt;/li&gt;&#xA;&lt;li&gt;复杂的支付系统可能还有外汇等子系统，甚至一个子系统可能会分为多个应用来部署，比如收单结算子系统拆分为收单、结算应用&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281651782.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281651782.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;复杂系统架构&#34;&gt;&#xA;  复杂系统架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e6%9d%82%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;比较完整的一个系统架构，里面划分了比较清楚的子域或模块&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281711947.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281711947.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;系统依赖图&#34;&gt;&#xA;  系统依赖图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e4%be%9d%e8%b5%96%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;红色链路为主要支付链路&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281731832.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281731832.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;常见术语&#34;&gt;&#xA;  常见术语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e6%9c%af%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;通用&#34;&gt;&#xA;  通用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支付服务提供商：PSP，Payment Service Provider。为商户提供支付解决方案的公司。银行、第三方支付公司都属于支付服务提供商&lt;/li&gt;&#xA;&lt;li&gt;收单机构：Acuquiring Institution/Acquirer。负责处理和清算商户交易的金融机构或支付服务提供商（PSP）&lt;/li&gt;&#xA;&lt;li&gt;拍照：License。由监管机构或政府授予的官方许可，允许持牌者在特定的法律框架和规定内经营某种金融服务或支付业务。支付相关的牌照主要有：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;银行牌照：允许公司提供传统银行服务，例如接受存款、提供贷款等&lt;/li&gt;&#xA;&lt;li&gt;支付机构牌照：允许公司提供支付服务，如支付处理、资金转账、电子钱包服务等&lt;/li&gt;&#xA;&lt;li&gt;电子货币机构牌照：允许公司发行和管理电子货币，如预付卡、电子钱包中的资金等&lt;/li&gt;&#xA;&lt;li&gt;PA牌照：Payment Account，也就是储值牌照，用户可以先充值，后使用余额进行支付&lt;/li&gt;&#xA;&lt;li&gt;PG牌照：Payment Gateway。也就是支付网关牌照，只能调用外部渠道支付，不能有余额&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;展业：在指定的区域开展业务。通常和牌照申请、监管合规等放在一起&lt;/li&gt;&#xA;&lt;li&gt;收单产品：支付服务提供商为商户提供的支付服务&lt;/li&gt;&#xA;&lt;li&gt;担保交易：用户先把钱给到支付平台，用户确认收货再给钱到商家&lt;/li&gt;&#xA;&lt;li&gt;即时到帐：付款资金直接转移到收款账户，不需要用户二次确认&lt;/li&gt;&#xA;&lt;li&gt;资金产品：通常指与处理客户资金流动相关的服务，包括充值、转账、提现、代发等功能&lt;/li&gt;&#xA;&lt;li&gt;代发：公司或组织通过在线支付系统将资金直接转入个人账户。有代发到余额和代发到卡&lt;/li&gt;&#xA;&lt;li&gt;退款：Refund，一般指支付第二天的逆向行为，有部份退款和全额退款&lt;/li&gt;&#xA;&lt;li&gt;撤销：Cancel，一般指支付当天的逆向行为&lt;/li&gt;&#xA;&lt;li&gt;冲正：与撤销类似。来源于POS机时代，在交易发生当天用户申请退货退款时，或POS机支付超时的情况下，操作员发起一笔冲正，收单机构如果已经扣款就会退回&lt;/li&gt;&#xA;&lt;li&gt;T日/T+N日：T日：交易实际发生的日期，T+N：从交易日发生之后N个工作日。比如T+1清算，就是指交易完成后，第二天进行清算&lt;/li&gt;&#xA;&lt;li&gt;风控：交易的风险控制，欺诈检测、信用评估、合规检查&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;外汇&#34;&gt;&#xA;  外汇&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%96%e6%b1%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁汇：锁定汇率。在电商场景下，电商平台不愿意承担汇损风险，就直接在支付成功后，使用支付金额向外汇机构锁定一个固定汇率&lt;/li&gt;&#xA;&lt;li&gt;换汇：实际购汇。在电商场景下，电商平台不愿意承担汇损风险，在支付渠道清算后，使用原锁汇时的汇率，正式向外汇机构购汇，完成交割&lt;/li&gt;&#xA;&lt;li&gt;即期：按当前市场汇率立即交换两种货币。一般是2个工作日内交割。一般是场内交易&lt;/li&gt;&#xA;&lt;li&gt;远期：双方约定以当前确定汇率（远期汇率）在将来某天交换货币。一般是场外交易&lt;/li&gt;&#xA;&lt;li&gt;掉期：双方先通过即期交易，然后约定在远期时再换回来。一般是场外交易&lt;/li&gt;&#xA;&lt;li&gt;结汇入境：以入境中国为例。先在境外兑换成离岸人民币，再结算到境内银行账户或金融机构账户&lt;/li&gt;&#xA;&lt;li&gt;入境结汇：以入境中国为例。先以外币入境，在境内再兑换成人民币&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;资金账务&#34;&gt;&#xA;  资金账务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b5%84%e9%87%91%e8%b4%a6%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会计日：标识一笔交易在会计层面的日期。交易需要跨多个子系统，完成一笔交易的时间在不同子系统中是不一样的。与自然日可能有差异，特别是交易在零点附近的时候，所以统一使用会计日来明确交易应该计入哪一天。有可能一笔交易发生在2023.12.23这天，但是交易记录在2023.12.24这个会计日内&lt;/li&gt;&#xA;&lt;li&gt;日切：会计日切换到下一天。在这个点之后，所有的交易会被记录到下一个会计日。日切之后，通常需要进行批处理，包括交易清算、账户余额更新、试算平衡等&lt;/li&gt;&#xA;&lt;li&gt;记账：交易记录到会计科目中&lt;/li&gt;&#xA;&lt;li&gt;复试记账：一种会计准则，要求每笔交易都要有两个或以上的账目变动来记录，使得借方和贷方的总金额相等&lt;/li&gt;&#xA;&lt;li&gt;头寸：通俗地说，就是余额情况。头寸不够，就是余额不够&lt;/li&gt;&#xA;&lt;li&gt;流动性调拨：在多个银行备付金账户中转账，以确保符合业务需求。比如因为一些特殊原因，所有用户当天通过CMB渠道只支付了400万，但是当天所有用户合计要在CMB渠道退款500万&lt;/li&gt;&#xA;&lt;li&gt;结算：收单机构把交易资金结转给商户。通常有结算到余额到结算到银行卡&lt;/li&gt;&#xA;&lt;li&gt;清算：机构之间进行交易资金的转移。通常会由专门的清算机构负责清算。本质和结算是一样的，只是结算通常用在收单机构与商户之间，清算用在持牌的金融机构之间&lt;/li&gt;&#xA;&lt;li&gt;轧差：清分过程中把当天应收和应付金额相互抵消，最终只有净额需要结算或清算，注意这个字读（gá）&lt;/li&gt;&#xA;&lt;li&gt;净清算额：轧差之后，各参与方需要转移的资金总额&lt;/li&gt;&#xA;&lt;li&gt;对账：比对交易双方的记账或资金。比如和渠道的对账。通常有明细对账和资金对账。前者就是对交易数据，按笔核对，后者对真实打款情况，当天交易100万，是否真实打款100万&lt;/li&gt;&#xA;&lt;li&gt;长款/短款：对账过程中发现实际的金额高于或低于账面金额&lt;/li&gt;&#xA;&lt;li&gt;计收费：支付平台针对手续费的记录和汇总。一般有商户计费和渠道计费&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>网络游戏同步机制</title>
      <link>https://weenable.github.io/posts/game/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 28 Feb 2025 19:08:15 +0800</pubDate>
      <guid>https://weenable.github.io/posts/game/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;网络同步&#34;&gt;&#xA;  网络同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;网络同步 = 数据同步 + 表现同步&#xA;网络同步一般分为帧同步和状态同步&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;帧同步&#34;&gt;&#xA;  帧同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%a7%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;基本原理&#34;&gt;&#xA;  基本原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;计算逻辑在客户端，按照一定的帧速率（逻辑帧而非渲染帧），服务端只转发&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;帧同步缺陷&#34;&gt;&#xA;  帧同步缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%a7%e5%90%8c%e6%ad%a5%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算逻辑不在服务端，容易出现外挂&lt;/li&gt;&#xA;&lt;li&gt;严格帧锁定同步网络差的客户端会影响其他玩家体验（乐观帧锁定同步）&lt;/li&gt;&#xA;&lt;li&gt;不同客户端浮点数精度问题、随机值不统一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;乐观帧锁定&#34;&gt;&#xA;  乐观帧锁定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b9%90%e8%a7%82%e5%b8%a7%e9%94%81%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;传统严格帧锁定算法会出现慢网影响其他人的情况，此时可以采用定时不等待的方式，服务端以固定帧率同步数据，不依赖每个玩家是否有操作&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;状态同步&#34;&gt;&#xA;  状态同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8a%b6%e6%80%81%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;基本原理-1&#34;&gt;&#xA;  基本原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;计算逻辑在服务端，客户端只表现。状态同步一般都应用RPC调用和增量同步技术&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;状态同步缺陷&#34;&gt;&#xA;  状态同步缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8a%b6%e6%80%81%e5%90%8c%e6%ad%a5%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;延迟过大、服务端压力大&lt;/li&gt;&#xA;&lt;li&gt;状态同步做回放系统较麻烦&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;网络协议&#34;&gt;&#xA;  网络协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;一些基础&#34;&gt;&#xA;  一些基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%9b%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TCP是流式传输没有固定内容边界，会出现拆包和沾包问题，UDP基于报文有消息边界，不存在拆包沾包问题&lt;/li&gt;&#xA;&lt;li&gt;TCP默认情况下使用Nagle算法，可以优化传输减少网络里的小包数量，传输时协议栈会累积数据直到满足以下条件之一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;积累的数量达到最大MSS&lt;/li&gt;&#xA;&lt;li&gt;收到一个ACK&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TCp默认情况下使用延迟累积ACK发送机制，传输时协议栈会合并多个ACK发送，提高网络性能，直到满足一下条件之一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;累积多个ACK或有数据传输时&lt;/li&gt;&#xA;&lt;li&gt;ACK超时（40ms）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TCP可以使用&lt;strong&gt;TCP_NODELAY&lt;/strong&gt;来关闭Nagle算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;网络协议方案&#34;&gt;&#xA;  网络协议方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;可以默认使用TCP，然后再打开使用KCP&#xA;在网络状态较好时可以使用KCP，当出现大量丢包时切换使用TCP&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;同步优化方案&#34;&gt;&#xA;  同步优化方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8c%e6%ad%a5%e4%bc%98%e5%8c%96%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;表现优化&#34;&gt;&#xA;  表现优化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a1%a8%e7%8e%b0%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;表现优化主要是想弱化玩家对于延迟的感受，主要分为以下一些优化技术&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;1插值优化&#34;&gt;&#xA;  1.插值优化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e6%8f%92%e5%80%bc%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/631954987?utm_id=0&#34;&gt;https://zhuanlan.zhihu.com/p/631954987?utm_id=0&lt;/a&gt;&#xA;状态同步中，由于客户端每次收到都是其他角色的位置信息，为了避免位置突变，客户端会使用插值技术而不是跳帧&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内插值目的是解决客户端离散信息更新导致的突变问题，通过线性插值Lerp插入过渡数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;收到数据包时不能直接应用，必须等到下一个数据包到来才能开始插值，延迟增加&lt;/li&gt;&#xA;&lt;li&gt;运动状态发生剧烈变化时，会丢失部份运动状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228102431.png&#34; src=&#34;https://pic4.zhimg.com/v2-3fea56f86c6bffa3d32ae1681fe9ad73_b.webp&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>跳表和实现</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:07:07 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;数据结构示意图&#34;&gt;&#xA;  数据结构示意图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%a4%ba%e6%84%8f%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228725321.png&#34; src=&#34;images/%E8%B7%B3%E8%A1%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/image-2025228725321.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import &amp;#34;math/rand&amp;#34;&#xA;&#xA;const (&#xA;&#x9;MaxLevel    = 16  // 跳表的最大层数&#xA;&#x9;Probability = 0.5 // 随机提升层数的概率&#xA;)&#xA;&#xA;type SkipList struct {&#xA;&#x9;head  *Node&#xA;&#x9;level int&#xA;}&#xA;&#xA;type Node struct {&#xA;&#x9;key   int&#xA;&#x9;value string&#xA;&#x9;next  []*Node&#xA;}&#xA;&#xA;func randomLevel() int {&#xA;&#x9;level := 1&#xA;&#x9;for rand.Float64() &amp;lt; Probability &amp;amp;&amp;amp; level &amp;lt; MaxLevel {&#xA;&#x9;&#x9;level++&#xA;&#x9;}&#xA;&#x9;return level&#xA;}&#xA;&#xA;func NewSkipList() *SkipList {&#xA;&#x9;return &amp;amp;SkipList{&#xA;&#x9;&#x9;head:  NewNode(0, &amp;#34;&amp;#34;, MaxLevel),&#xA;&#x9;&#x9;level: 1,&#xA;&#x9;}&#xA;}&#xA;&#xA;func NewNode(key int, value string, level int) *Node {&#xA;&#x9;return &amp;amp;Node{&#xA;&#x9;&#x9;key:   key,&#xA;&#x9;&#x9;value: value,&#xA;&#x9;&#x9;next:  make([]*Node, level),&#xA;&#x9;}&#xA;}&#xA;&#xA;// 插入元素&#xA;func (sl *SkipList) Insert(key int, value string) {&#xA;&#x9;update := make([]*Node, MaxLevel)&#xA;&#x9;node := sl.head&#xA;&#xA;&#x9;// 找到每一层最后一个&amp;lt;key的节点放入update中&#xA;&#x9;for i := sl.level - 1; i &amp;gt;= 0; i-- {&#xA;&#x9;&#x9;for node.next[i] != nil &amp;amp;&amp;amp; node.next[i].key &amp;lt; key {&#xA;&#x9;&#x9;&#x9;node = node.next[i]&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;update[i] = node&#xA;&#x9;}&#xA;&#xA;&#x9;// 随机层数&#xA;&#x9;level := randomLevel()&#xA;&#x9;// 将&amp;gt;sl.level的层，sl.head加入update中&#xA;&#x9;if level &amp;gt; sl.level {&#xA;&#x9;&#x9;for i := sl.level; i &amp;lt; level; i++ {&#xA;&#x9;&#x9;&#x9;update[i] = sl.head&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;sl.level = level&#xA;&#x9;}&#xA;&#xA;&#x9;// 将新节点加入跳表&#xA;&#x9;newNode := NewNode(key, value, level)&#xA;&#x9;for i := 0; i &amp;lt; level; i++ {&#xA;&#x9;&#x9;newNode.next[i] = update[i].next[i]&#xA;&#x9;&#x9;update[i].next[i] = newNode&#xA;&#x9;}&#xA;}&#xA;&#xA;// 查找元素&#xA;func (sl *SkipList) Search(key int) (string, bool) {&#xA;&#x9;// 从最高层开始往下，找到最后一个比key小的节点&#xA;&#x9;node := sl.head&#xA;&#x9;for i := sl.level - 1; i &amp;gt;= 0; i-- {&#xA;&#x9;&#x9;for node.next[i] != nil &amp;amp;&amp;amp; node.next[i].key &amp;lt; key {&#xA;&#x9;&#x9;&#x9;node = node.next[i]&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;node = node.next[0]&#xA;&#x9;if node != nil &amp;amp;&amp;amp; node.key == key {&#xA;&#x9;&#x9;return node.value, true&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;#34;&amp;#34;, false&#xA;}&#xA;&#xA;// 删除元素&#xA;func (sl *SkipList) Delete(key int) bool {&#xA;&#x9;update := make([]*Node, MaxLevel)&#xA;&#xA;&#x9;// 从最高层开始往下，找到最后一个比key小的节点&#xA;&#x9;node := sl.head&#xA;&#x9;for i := sl.level; i &amp;gt;= 0; i-- {&#xA;&#x9;&#x9;for node.next[i] != nil &amp;amp;&amp;amp; node.next[i].key &amp;lt; key {&#xA;&#x9;&#x9;&#x9;node = node.next[i]&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;update[i] = node&#xA;&#x9;}&#xA;&#xA;&#x9;// 判断元素是否存在&#xA;&#x9;node = node.next[0]&#xA;&#x9;if node == nil || node.key != key {&#xA;&#x9;&#x9;return false&#xA;&#x9;}&#xA;&#xA;&#x9;// 从第1层开始往上，剔除目标节点&#xA;&#x9;for i := 0; i &amp;lt; sl.level; i++ {&#xA;&#x9;&#x9;if update[i].next[i] != node {&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;update[i].next[i] = node.next[i]&#xA;&#x9;}&#xA;&#xA;&#x9;// 如果高层除了头节点没有多余节点，则降层&#xA;&#x9;for sl.level &amp;gt; 1 &amp;amp;&amp;amp; sl.head.next[sl.level-1] == nil {&#xA;&#x9;&#x9;sl.level--&#xA;&#x9;}&#xA;&#xA;&#x9;return true&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;sl := skiplist.NewSkipList()&#xA;&#x9;sl.Insert(1, &amp;#34;Hello&amp;#34;)&#xA;&#x9;sl.Insert(2, &amp;#34;World&amp;#34;)&#xA;&#x9;sl.Insert(3, &amp;#34;SkipList&amp;#34;)&#xA;&#xA;&#x9;if value, found := sl.Search(2); found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found key 2 with value:&amp;#34;, value)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Key 2 not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;sl.Delete(2)&#xA;&#x9;if value, found := sl.Search(2); found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found key 2 with value:&amp;#34;, value)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Key 2 not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>哈希表渐进式Rehash实现</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:06:04 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;说明&#34;&gt;&#xA;  说明&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b4%e6%98%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;哈希冲突采用链地址法&lt;/li&gt;&#xA;&lt;li&gt;在操作中进行渐进式扩容迁移&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;// 初始哈希表大小&#xA;const initialSize = 4&#xA;&#xA;// 哈希表元素&#xA;type entry struct {&#xA;&#x9;key   string&#xA;&#x9;value interface{}&#xA;&#x9;next  *entry&#xA;}&#xA;&#xA;type dict struct {&#xA;&#x9;ht          [2][]*entry&#xA;&#x9;rehashIndex int&#xA;}&#xA;&#xA;func NewDict() *dict {&#xA;&#x9;d := &amp;amp;dict{&#xA;&#x9;&#x9;ht:          [2][]*entry{make([]*entry, initialSize), nil},&#xA;&#x9;&#x9;rehashIndex: -1,&#xA;&#x9;}&#xA;&#xA;&#x9;return d&#xA;}&#xA;&#xA;// 实现一个哈希函数&#xA;func (d *dict) hash(key string) int {&#xA;&#x9;h := 0&#xA;&#x9;for i := 0; i &amp;lt; len(key); i++ {&#xA;&#x9;&#x9;h = 31*h + int(key[i])&#xA;&#x9;}&#xA;&#xA;&#x9;return h&#xA;}&#xA;&#xA;// 插入元素&#xA;func (d *dict) Add(key string, value interface{}) {&#xA;&#x9;if d.rehashIndex != -1 {&#xA;&#x9;&#x9;d.rehash()&#xA;&#x9;}&#xA;&#xA;&#x9;// 如果此刻没有在渐进扩容期间，并且当前元素个数&amp;gt;=容量一半，触发渐进扩容&#xA;&#x9;if d.ht[1] == nil &amp;amp;&amp;amp; len(d.ht[0]) &amp;gt; 0 &amp;amp;&amp;amp; len(d.ht[0]) &amp;gt;= cap(d.ht[0])/2 {&#xA;&#x9;&#x9;d.ht[1] = make([]*entry, len(d.ht[0])*2) //扩容一倍&#xA;&#x9;&#x9;d.rehashIndex = 0&#xA;&#x9;}&#xA;&#xA;&#x9;index := d.hash(key) % len(d.ht[0])&#xA;&#x9;newEntry := &amp;amp;entry{key: key, value: value, next: d.ht[0][index]}&#xA;&#x9;d.ht[0][index] = newEntry&#xA;}&#xA;&#xA;// 获取元素&#xA;func (d *dict) Get(key string) (interface{}, bool) {&#xA;&#x9;if d.rehashIndex != -1 {&#xA;&#x9;&#x9;d.rehash()&#xA;&#x9;}&#xA;&#xA;&#x9;// 在h[0]中找&#xA;&#x9;index := d.hash(key) % len(d.ht[0])&#xA;&#x9;for curEntry := d.ht[0][index]; curEntry != nil; curEntry = curEntry.next {&#xA;&#x9;&#x9;if curEntry.key == key {&#xA;&#x9;&#x9;&#x9;return curEntry.value, true&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;// 在h[1]中找，已经迁移&#xA;&#x9;if d.ht[1] != nil {&#xA;&#x9;&#x9;index = d.hash(key) % len(d.ht[1])&#xA;&#x9;&#x9;for entry := d.ht[1][index]; entry != nil; entry = entry.next {&#xA;&#x9;&#x9;&#x9;if entry.key == key {&#xA;&#x9;&#x9;&#x9;&#x9;return entry.value, true&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return nil, false&#xA;}&#xA;&#xA;// 渐进rehash执行的函数&#xA;func (d *dict) rehash() {&#xA;&#x9;if d.rehashIndex == -1 {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;// 渐进移动一个桶的数据&#xA;&#x9;for i := 0; i &amp;lt; 1 &amp;amp;&amp;amp; d.rehashIndex &amp;lt; len(d.ht[0]); i++ {&#xA;&#x9;&#x9;if d.ht[0][d.rehashIndex] != nil {&#xA;&#x9;&#x9;&#x9;curEntry := d.ht[0][d.rehashIndex]&#xA;&#x9;&#x9;&#x9;for curEntry != nil {&#xA;&#x9;&#x9;&#x9;&#x9;nextEntry := curEntry.next&#xA;&#x9;&#x9;&#x9;&#x9;index := d.hash(curEntry.key) % len(d.ht[1])&#xA;&#x9;&#x9;&#x9;&#x9;curEntry.next = d.ht[1][index]&#xA;&#x9;&#x9;&#x9;&#x9;d.ht[1][index] = curEntry&#xA;&#x9;&#x9;&#x9;&#x9;curEntry = nextEntry&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;d.ht[0][d.rehashIndex] = nil&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;d.rehashIndex++&#xA;&#x9;}&#xA;&#xA;&#x9;if d.rehashIndex &amp;gt;= len(d.ht[0]) {&#xA;&#x9;&#x9;d.ht[0] = d.ht[1]&#xA;&#x9;&#x9;d.ht[1] = nil&#xA;&#x9;&#x9;d.rehashIndex = -1&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;func main() {&#xA;&#x9;d := rehash.NewDict()&#xA;&#x9;d.Add(&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;)&#xA;&#x9;d.Add(&amp;#34;baz&amp;#34;, &amp;#34;qux&amp;#34;)&#xA;&#xA;&#x9;val, found := d.Get(&amp;#34;foo&amp;#34;)&#xA;&#x9;if found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found foo:&amp;#34;, val)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;foo not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;val, found = d.Get(&amp;#34;baz&amp;#34;)&#xA;&#x9;if found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found baz:&amp;#34;, val)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;baz not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;// 加这两个元素前已经触发扩容，因为设定元素个数&amp;gt;=容量一半则扩容&#xA;&#x9;d.Add(&amp;#34;new&amp;#34;, &amp;#34;value&amp;#34;)&#xA;&#x9;d.Add(&amp;#34;another&amp;#34;, &amp;#34;entry&amp;#34;)&#xA;&#xA;&#x9;val, found = d.Get(&amp;#34;new&amp;#34;)&#xA;&#x9;if found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found new:&amp;#34;, val)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;new not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>go-redis哨兵模式主从切换源码分析</title>
      <link>https://weenable.github.io/posts/golang/go-redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 28 Feb 2025 19:04:12 +0800</pubDate>
      <guid>https://weenable.github.io/posts/golang/go-redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现原理&#34;&gt;&#xA;  实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过哨兵获取主节点信息：在连接 Redis 集群时，&lt;code&gt;go-redis&lt;/code&gt; 客户端会连接到一个或多个哨兵节点，获取当前的主节点信息。如果主节点发生故障，哨兵会进行故障转移，并通知客户端新的主节点信息。&lt;/li&gt;&#xA;&lt;li&gt;周期性地从哨兵获取主节点信息：&lt;code&gt;go-redis&lt;/code&gt; 客户端会周期性地向哨兵节点请求主节点信息，以确保它始终连接到当前的主节点。这个机制可以帮助客户端快速感知主从切换。&lt;/li&gt;&#xA;&lt;li&gt;在操作失败时重新获取主节点信息：如果客户端在执行操作时遇到连接错误或其他错误，可能会重新从哨兵节点获取主节点的信息，并重试操作。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;源码分析&#34;&gt;&#xA;  源码分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//rdb := redis.NewFailoverClient(&amp;amp;redis.FailoverOptions{&#xA;//    MasterName:    &amp;#34;mymaster&amp;#34;, // 哨兵配置中主节点的名字&#xA;//    SentinelAddrs: []string{&amp;#34;127.0.0.1:26379&amp;#34;, &amp;#34;127.0.0.1:26380&amp;#34;, &amp;#34;127.0.0.1:26381&amp;#34;},&#xA;//})&#xA;&#xA;&#xA;type FailoverOptions struct {&#xA;    MasterName    string&#xA;    SentinelAddrs []string&#xA;    // ... other options&#xA;}&#xA;&#xA;func NewFailoverClient(opt *FailoverOptions) *Client {&#xA;    sentinel := newSentinel(opt)&#xA;    return NewClient(&amp;amp;Options{&#xA;        Addr: sentinel.masterAddr(),&#xA;        // ... other options&#xA;    })&#xA;}&#xA;&#xA;func newSentinel(opt *FailoverOptions) *sentinel {&#xA;    // Connect to sentinel nodes and get master address&#xA;    return &amp;amp;sentinel{&#xA;        masterName: opt.MasterName,&#xA;        addrs:      opt.SentinelAddrs,&#xA;    }&#xA;}&#xA;&#xA;func (s *sentinel) masterAddr() string {&#xA;    // Get master address from sentinel nodes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;周期性刷新master地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (s *sentinel) periodicallyRefreshMasterAddr() {&#xA;    ticker := time.NewTicker(time.Minute)&#xA;    for range ticker.C {&#xA;        addr := s.masterAddr()&#xA;        // Update client&amp;#39;s master address&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;失败时重试和刷新master&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (c *Client) doWithRetry(fn func() error) error {&#xA;    for i := 0; i &amp;lt; maxRetries; i++ {&#xA;        err := fn()&#xA;        if err == nil {&#xA;            return nil&#xA;        }&#xA;        if isConnectionError(err) {&#xA;            c.refreshMasterAddr()&#xA;        }&#xA;        time.Sleep(retryBackoff)&#xA;    }&#xA;    return fmt.Errorf(&amp;#34;after %d retries, last error: %v&amp;#34;, maxRetries, err)&#xA;}&#xA;&#xA;func (c *Client) refreshMasterAddr() {&#xA;    addr := c.sentinel.masterAddr()&#xA;    c.Options().Addr = addr&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>实现redis客户端一致性哈希分片</title>
      <link>https://weenable.github.io/posts/golang/%E5%AE%9E%E7%8E%B0redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E5%88%86%E7%89%87/</link>
      <pubDate>Fri, 28 Feb 2025 19:03:16 +0800</pubDate>
      <guid>https://weenable.github.io/posts/golang/%E5%AE%9E%E7%8E%B0redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E5%88%86%E7%89%87/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现原理&#34;&gt;&#xA;  实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;哈希方案有以下几种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通哈希分片&lt;/li&gt;&#xA;&lt;li&gt;一致性哈希分片&lt;/li&gt;&#xA;&lt;li&gt;范围哈希分片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;分片有以下几种方案：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;redis官方哈希槽分片方案（属于服务端sharding，使用范围哈希）&lt;/li&gt;&#xA;&lt;li&gt;客户端sharding，可以使用普通哈希、一致性哈希&lt;/li&gt;&#xA;&lt;li&gt;代理sharding，使用代理器进行分片，有性能损耗&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;客户端通过一致性哈希实现分片&#34;&gt;&#xA;  客户端通过一致性哈希实现分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e9%80%9a%e8%bf%87%e4%b8%80%e8%87%b4%e6%80%a7%e5%93%88%e5%b8%8c%e5%ae%9e%e7%8e%b0%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;context&amp;#34;&#xA;&#x9;&amp;#34;github.com/go-redis/redis/v8&amp;#34;&#xA;&#x9;&amp;#34;github.com/stathat/consistent&amp;#34;&#xA;)&#xA;&#xA;// 初始化支持一致性哈希的客户端结构&#xA;type ShardingClient struct {&#xA;&#x9;consistentHash *consistent.Consistent&#xA;&#x9;clients        map[string]*redis.Client&#xA;}&#xA;&#xA;func NewShardingClient(addrs []string) *ShardingClient {&#xA;&#x9;ch := consistent.New()&#xA;&#x9;clients := make(map[string]*redis.Client)&#xA;&#xA;&#x9;for _, addr := range addrs {&#xA;&#x9;&#x9;ch.Add(addr)&#xA;&#x9;&#x9;clients[addr] = redis.NewClient(&amp;amp;redis.Options{&#xA;&#x9;&#x9;&#x9;Addr: addr,&#xA;&#x9;&#x9;})&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;amp;ShardingClient{&#xA;&#x9;&#x9;consistentHash: ch,&#xA;&#x9;&#x9;clients:        clients,&#xA;&#x9;}&#xA;}&#xA;&#xA;// getClient 根据键获取相应的 Redis 客户端&#xA;func (sc *ShardingClient) getClient(key string) (*redis.Client, error) {&#xA;&#x9;addr, err := sc.consistentHash.Get(key)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return nil, err&#xA;&#x9;}&#xA;&#x9;return sc.clients[addr], nil&#xA;}&#xA;&#xA;// Set 在相应的 Redis 实例上设置键值对&#xA;func (sc *ShardingClient) Set(ctx context.Context, key, value string) error {&#xA;&#x9;client, err := sc.getClient(key)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return client.Set(ctx, key, value, 0).Err()&#xA;}&#xA;&#xA;// Get 在相应的 Redis 实例上获取键值对&#xA;func (sc *ShardingClient) Get(ctx context.Context, key string) (string, error) {&#xA;&#x9;client, err := sc.getClient(key)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return &amp;#34;&amp;#34;, err&#xA;&#x9;}&#xA;&#x9;return client.Get(ctx, key).Result()&#xA;}&#xA;&#xA;&#xA;func main() {&#xA;&#x9;addrs := []string{&#xA;&#x9;&#x9;&amp;#34;127.0.0.1:6379&amp;#34;,&#xA;&#x9;&#x9;&amp;#34;127.0.0.1:6380&amp;#34;,&#xA;&#x9;&#x9;&amp;#34;127.0.0.1:6381&amp;#34;,&#xA;&#x9;}&#xA;&#xA;&#x9;// 初始化 Sharding 客户端&#xA;&#x9;shardingClient := NewShardingClient(addrs)&#xA;&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;// 测试连接和操作&#xA;&#x9;err := shardingClient.Set(ctx, &amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&amp;#34;Failed to set key: %v&amp;#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;val, err := shardingClient.Get(ctx, &amp;#34;key&amp;#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&amp;#34;Failed to get key: %v&amp;#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&amp;#34;key: %s\n&amp;#34;, val)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>布隆过滤器算法实现</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:01:03 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现原理&#34;&gt;&#xA;  实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;布隆过滤器由一个位数组（bit array）和多个哈希函数（hash functions）组成。其工作原理如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建一个长度为 &lt;code&gt;m&lt;/code&gt; 的位数组，将所有位初始化为 0。&lt;/li&gt;&#xA;&lt;li&gt;选择 &lt;code&gt;k&lt;/code&gt; 个独立的哈希函数，每个哈希函数将输入映射到 &lt;code&gt;[0, m-1]&lt;/code&gt; 范围内的一个位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;插入元素&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于要插入的元素，通过 &lt;code&gt;k&lt;/code&gt; 个哈希函数分别计算出 &lt;code&gt;k&lt;/code&gt; 个哈希值。&lt;/li&gt;&#xA;&lt;li&gt;将位数组中这 &lt;code&gt;k&lt;/code&gt; 个位置的值设置为 1。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;查询元素&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于要查询的元素，通过 &lt;code&gt;k&lt;/code&gt; 个哈希函数分别计算出 &lt;code&gt;k&lt;/code&gt; 个哈希值。&lt;/li&gt;&#xA;&lt;li&gt;检查位数组中这 &lt;code&gt;k&lt;/code&gt; 个位置的值，如果所有位置的值都为 1，则认为该元素可能在集合中；如果有任何一个位置的值为 0，则认为该元素不在集合中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228218354.png&#34; src=&#34;images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/image-2025228218354.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;package&lt;/span&gt; bloomfilter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;hash/fnv&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;type&lt;/span&gt; BloomFilter &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;bitset []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//比特数组&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m      &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//比特数组长度&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;k      &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//哈希函数数量&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;NewBloomFilter&lt;/span&gt;(n &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, p &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;float64&lt;/span&gt;) *BloomFilter {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;int&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Ceil&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;float64&lt;/span&gt;(-n) * math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Log&lt;/span&gt;(p) / math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Pow&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Log&lt;/span&gt;(2), 2)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;k := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;int&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Ceil&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Log&lt;/span&gt;(2) * &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;float64&lt;/span&gt;(m) / &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;float64&lt;/span&gt;(n)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &amp;amp;BloomFilter{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;bitset: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt;, m),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;m:      m,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;k:      k,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 哈希函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (bf *BloomFilter) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hash&lt;/span&gt;(data []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;, seed &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;uint32&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;h := fnv.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;New32a&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;h.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Write&lt;/span&gt;(data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;hash := h.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Sum32&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;int&lt;/span&gt;((hash + seed) % &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;uint32&lt;/span&gt;(bf.m))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 添加元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (bf *BloomFilter) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Add&lt;/span&gt;(item &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; bf.k; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;pos := bf.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hash&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;byte&lt;/span&gt;(item), &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;uint32&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;bf.bitset[pos] = &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 查找元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (bf *BloomFilter) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Contains&lt;/span&gt;(item &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; bf.k; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;pos := bf.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hash&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;byte&lt;/span&gt;(item), &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;uint32&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; !bf.bitset[pos] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>区块链相关定义和概念</title>
      <link>https://weenable.github.io/posts/web3/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9B%B8%E5%85%B3%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 28 Feb 2025 18:59:06 +0800</pubDate>
      <guid>https://weenable.github.io/posts/web3/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9B%B8%E5%85%B3%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h4 class=&#34;heading&#34; id=&#34;1区块链基本架构&#34;&gt;&#xA;  1.区块链基本架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%8c%ba%e5%9d%97%e9%93%be%e5%9f%ba%e6%9c%ac%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据层：描述区块链物理结构&lt;/li&gt;&#xA;&lt;li&gt;网络层：提供节点间数据通信和数据校验&lt;/li&gt;&#xA;&lt;li&gt;共识层：提供节点间达成共识的算法&lt;/li&gt;&#xA;&lt;li&gt;激励层：提供激励措施&lt;/li&gt;&#xA;&lt;li&gt;合约层：提供可编程能力&lt;/li&gt;&#xA;&lt;li&gt;应用层：提供封装区块链技术的应用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;2拜占庭问题和拜占庭容错&#34;&gt;&#xA;  2.拜占庭问题和拜占庭容错&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e6%8b%9c%e5%8d%a0%e5%ba%ad%e9%97%ae%e9%a2%98%e5%92%8c%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;拜占庭问题：存在少数不良节点场景下的一致性达成问题&#xA;拜占庭算法（BFT）：N为节点总数，F为其中不良节点数，当N&amp;gt;=3F+1时问题才有解&#xA;实用拜占庭算法（PBFT）：是第一个广泛采用的BFT算法，采用密码学技术（RSA签名算法、信息摘要算法、信息验证算法）&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;3区块链常见共识算法&#34;&gt;&#xA;  3.区块链常见共识算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%8c%ba%e5%9d%97%e9%93%be%e5%b8%b8%e8%a7%81%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工作量证明POW：通过耗费电力阻止不良行为&lt;/li&gt;&#xA;&lt;li&gt;权益证明POS：代币质押者为验证者，通过绑定验证者和网络的利益来阻止不良行为&lt;/li&gt;&#xA;&lt;li&gt;委托权益证明DPOS：代币持有者对交易验证者进行投票&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;4身份认证&#34;&gt;&#xA;  4.身份认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e8%ba%ab%e4%bb%bd%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;摘要算法+签名算法&#xA;A：对交易信息进行Hash取摘要，通过私钥加密生成签名&#xA;广播：广播交易信息+A公钥+A生成的签名&#xA;B：对交易信息Hash取摘要，通过A公钥解密签名得到摘要，比对两个摘要&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;5双重支付问题&#34;&gt;&#xA;  5.双重支付问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5%e5%8f%8c%e9%87%8d%e6%94%af%e4%bb%98%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;区块链存在51%攻击的问题，依靠强大的算力篡改区块进行强行分叉。&#xA;可以通过等待若干新块产生后再进行正式交付，来降低51%攻击的可能性&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;6闪电网络&#34;&gt;&#xA;  6.闪电网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6%e9%97%aa%e7%94%b5%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;比特币交易性能差（全网tps=7左右），同时还需要等待6个块的可行确认（抵御双重支付攻击），导致一笔交易可能要1小时的最终确认&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RSMC（序列到期可撤销合约）：链下通道+链上更新+违约惩罚&lt;/li&gt;&#xA;&lt;li&gt;HTLC（哈希时间锁定合约）：通过合约双方约定接收方提供一个哈希值，在一定时间内有人能提出一个字符串使得哈希后的值与已知值匹配，则转账方将这笔钱转给回答正确的人&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;7软分叉&#34;&gt;&#xA;  7.软分叉&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7%e8%bd%af%e5%88%86%e5%8f%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;定义&#34;&gt;&#xA;  定义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;在区块链协议中，软分叉（Soft Fork）是对现有协议做向后兼容的更改。软分叉的特点是，新规则是现有规则的一个子集，也就是说，遵循旧规则的节点仍然可以理解并处理遵循新规则的区块和交易，但不能创建不符合新规则的区块和交易&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;软分叉状态&#34;&gt;&#xA;  软分叉状态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%af%e5%88%86%e5%8f%89%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;软分叉状态指的是区块链网络中软分叉的激活和部署状态。通常，软分叉的激活分为以下几个阶段&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;定义阶段（Defined）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软分叉的代码已经被写入客户端软件，但还没有开始正式监控。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;投票阶段（Started）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;节点开始在区块头中嵌入信号（通过特定的区块版本位）来表示它们是否支持该软分叉。&lt;/li&gt;&#xA;&lt;li&gt;矿工通过在区块头中设置特定的比特位来投票支持或反对这个软分叉。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁定阶段（Locked In）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果在一个特定的周期内（例如 2016 个区块）达到了一定的支持率（通常是 95%），软分叉就会进入锁定阶段。&lt;/li&gt;&#xA;&lt;li&gt;在锁定阶段结束后，软分叉将会被激活。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;激活阶段（Active）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软分叉的规则开始正式生效，所有新创建的区块和交易都必须遵循这些新规则。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;软分叉状态表示区块链网络中软分叉的不同阶段，包括定义、投票、锁定和激活阶段。检查软分叉状态有助于节点决定如何与其他节点进行交互，以确保遵循最新的协议规则，从而提高网络的安全性和数据一致性。例如，在 SegWit 激活后，节点需要与支持 SegWit 的对等节点进行同步，以确保能够完整地验证所有区块链数据&lt;/p&gt;</description>
    </item>
    <item>
      <title>go内存池实现</title>
      <link>https://weenable.github.io/posts/golang/go%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 18:57:27 +0800</pubDate>
      <guid>https://weenable.github.io/posts/golang/go%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现&#34;&gt;&#xA;  实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;用于管理固定大小的字节切片（&lt;code&gt;[]byte&lt;/code&gt;）。内存池的目的在于减少内存分配和垃圾回收的开销，通过重用已经分配的内存块来提高性能&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;type&lt;/span&gt; MemoryPool &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;chan&lt;/span&gt; []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 从内存池中返回长度为8的字节切片，如果内存池中没有可用字节切片则新分配&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (l MemoryPool) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Borrow&lt;/span&gt;() []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; buf []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; buf = &amp;lt;-l:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;buf = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;, 8)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; buf[:8]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 将字节切片放回内存池&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (l MemoryPool) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Return&lt;/span&gt;(buf []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; l &amp;lt;- buf:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 垃圾回收&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; mp MemoryPool = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;chan&lt;/span&gt; []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;, 1024)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sl := mp.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Borrow&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mp.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Return&lt;/span&gt;(sl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>以太坊消息签名</title>
      <link>https://weenable.github.io/posts/web3/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B6%88%E6%81%AF%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Fri, 28 Feb 2025 18:55:39 +0800</pubDate>
      <guid>https://weenable.github.io/posts/web3/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B6%88%E6%81%AF%E7%AD%BE%E5%90%8D/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;签名算法和原理&#34;&gt;&#xA;  签名算法和原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ad%be%e5%90%8d%e7%ae%97%e6%b3%95%e5%92%8c%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以太坊使用椭圆曲线加密算法ECDSA来进行交易签名&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;密钥生成：生成私钥和公钥，私钥用于签名，公钥用于验证签名&lt;/li&gt;&#xA;&lt;li&gt;交易签名：使用私钥对原始消息进行签名&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对交易使用RLP（递归长度前缀编码）编码序列化&lt;/li&gt;&#xA;&lt;li&gt;使用keccka256哈希函数对编码后的交易进行计算&lt;/li&gt;&#xA;&lt;li&gt;使用私钥对哈希值进行签名，生成r、s、v值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;签名验证：使用公钥以及原始消息来验证签名的有效性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;验证签名代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;IsValidOrderSignature&lt;/span&gt;(address &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;, message &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;, sign &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ethMessage := []&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;\x19Ethereum Signed Message:\n&amp;#34;&lt;/span&gt; + strconv.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Itoa&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(message)) + message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;hash := crypto.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Keccak256&lt;/span&gt;(ethMessage)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sigBytes := hexutil.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;MustDecode&lt;/span&gt;(sign)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; sigBytes[64] == 27 || sigBytes[64] == 28 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;sigBytes[64] -= 27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pubKey, err := crypto.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SigToPub&lt;/span&gt;(hash, sigBytes)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;recAddress := crypto.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;PubkeyToAddress&lt;/span&gt;(*pubKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;recStr := strings.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;ToLower&lt;/span&gt;(recAddress.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; recStr == strings.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;ToLower&lt;/span&gt;(address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>P2P核心技术：Kad分布式路由表算法</title>
      <link>https://weenable.github.io/posts/web3/p2p%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFkad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 28 Feb 2025 18:51:48 +0800</pubDate>
      <guid>https://weenable.github.io/posts/web3/p2p%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFkad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;简介&#34;&gt;&#xA;  简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Kademlia（Kad）是分布式散列表（DHT）算法的一种，是去中心化P2P网络最核心的一种路由寻址技术，可以在无中心服务器（trackerless）的情况下，在网络中快速找到目标节点&lt;/p&gt;&#xA;&lt;p&gt;早期中心化服务器BtTorrent网络，需要种子服务器来帮助节点之间发现&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252285241628.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-20252285241628.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;实现Kad协议的P2P网络，每个节点维护一个路由表，仅记录离自己最近的一些节点信息，通过迭代查询来发现其他节点&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228534197.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-2025228534197.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;核心内容&#34;&gt;&#xA;  核心内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Node ID：P2P网络中，节点通过唯一的ID来进行标识，在原始Kad算法中，使用160bit哈希空间来作为Node ID&lt;/li&gt;&#xA;&lt;li&gt;Node Distance：每个节点保存自己附近的节点信息，是通过计算得到的逻辑距离来判断的（通过把两个节点的Node ID进行XOR运算，结果越小距离越近）&lt;/li&gt;&#xA;&lt;li&gt;K-Bucket：用一个Bucket来保存与当前节点距离在某个范围内的所有节点列表&lt;/li&gt;&#xA;&lt;li&gt;Bucket分裂：如果原始Bucket数量不够，需要进行分裂&lt;/li&gt;&#xA;&lt;li&gt;Routing Table：记录所有Bucket，每个bucket限制最多k个节点，如下图所示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252285349459.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-20252285349459.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Update：在节点bootstrap时，需要把连接上的节点更新到自己的routing table中&lt;/li&gt;&#xA;&lt;li&gt;LookUp：查找节点，找到与目标节点最近的bucket，如果目标节点在bucket中则直接范围，否则往bucket中节点发送查询请求，这些节点继续迭代查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;详细内容&#34;&gt;&#xA;  详细内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%a6%e7%bb%86%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;1node-id&#34;&gt;&#xA;  1.Node ID&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1node-id&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;Kad使用SHA1哈希来计算Node ID，SHA1是一个160bit（20字节）的哈希空间&#xA;IPFS使用SHA256哈希来计算Node ID，256bit（32字节）的哈希空间&#xA;eth使用SHA3，也是256bit哈希空间&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;2node-distance和xor&#34;&gt;&#xA;  2.Node Distance和XOR&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2node-distance%e5%92%8cxor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;对两个Node ID进行XOR运算，可以得出他们之间的距离&#xA;Kad中，根据当前节点和其他节点的Node ID匹配的最多的bit个数来构建一棵二叉树，这里匹配的bit数也叫LCP(longest common prefix)，按照LCP来划分子树&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252285458639.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-20252285458639.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;对于160bit空间的Node ID来说，一共会有160颗子树，也就是160个bucket&#xA;Kad要求每个节点知道其各子树的至少一个节点&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
