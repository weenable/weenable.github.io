<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Ween&#39;s Blog</title>
    <link>https://weenable.github.io/categories/golang/</link>
    <description>Recent content in Golang on Ween&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 19:21:10 +0800</lastBuildDate>
    <atom:link href="https://weenable.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>游戏服务器架构演进</title>
      <link>https://weenable.github.io/posts/game/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</link>
      <pubDate>Fri, 28 Feb 2025 19:21:10 +0800</pubDate>
      <guid>https://weenable.github.io/posts/game/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;游戏服务器要素&#34;&gt;&#xA;  游戏服务器要素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%a6%81%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;对于游戏服务器，三个比较重要的部份就是：CPU、内存、带宽的设计&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;逻辑架构：合适的进程、线程、协程的CPU调度方案，合适的同步或异步编程模型，分区分服或世界服的方式来提高服务器的承载量和稳定性&lt;/li&gt;&#xA;&lt;li&gt;内存架构：合理使用内存，提高承载量，降低服务延迟&lt;/li&gt;&#xA;&lt;li&gt;通信架构：通信协议如UDP/TCP&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;游戏服务器演进&#34;&gt;&#xA;  游戏服务器演进&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%bc%94%e8%bf%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;一弱交互游戏服务器&#34;&gt;&#xA;  一、弱交互游戏服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%bc%b1%e4%ba%a4%e4%ba%92%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;基于http通信模式的服务器，服务器架构和web差不多&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228214121.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-2025228214121.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;二长连接游戏服务器&#34;&gt;&#xA;  二、长连接游戏服务器&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e9%95%bf%e8%bf%9e%e6%8e%a5%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;在长连接中玩家是有状态的，消息传送的频率以及速度都快于弱联网游戏&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;第一代游戏服务器单线程无阻塞&#34;&gt;&#xA;  第一代游戏服务器，单线程无阻塞&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%80%e4%bb%a3%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%8d%95%e7%ba%bf%e7%a8%8b%e6%97%a0%e9%98%bb%e5%a1%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;所有玩家的请求都发到一个无阻塞的消息队列中，由单线程处理消息&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282212369.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282212369.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;线程模型如下：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282223840.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282223840.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;第二代游戏服务器分区分服&#34;&gt;&#xA;  第二代游戏服务器，分区分服&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%ba%8c%e4%bb%a3%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%88%86%e5%8c%ba%e5%88%86%e6%9c%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;单游戏服务器承载用户客户端有限，于是出现分区分服的概念，这种模型中一个游戏服务器就是一个平行世界，在第二代游戏服务器中同时也对进程和线程模型做了升级&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多线程：每个线程处理一个特定的场景内的tick事件，如果玩家跨场景则通过消息投递的方式通知另一个场景线程来进行玩家数据同步&lt;/li&gt;&#xA;&lt;li&gt;多进程：将网络、数据库的操作单独使用进程来处理，逻辑进程专心处理逻辑任务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282244672.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282244672.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;第三代游戏服务器世界服&#34;&gt;&#xA;  第三代游戏服务器，世界服&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ac%ac%e4%b8%89%e4%bb%a3%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%96%e7%95%8c%e6%9c%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;第三代游戏服务器主要是世界服，分为以下几种演化&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;三层架构：包含网关服务器、游戏逻辑服务器、DB服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282257901.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282257901.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分片架构：将游戏逻辑服务器再进行分片，分离出如场景服务器、非场景服务器等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282311243.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282311243.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大世界架构：将世界按区块划分，各场景服务器管理不同区块&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;三房间服务器游戏大厅&#34;&gt;&#xA;  三、房间服务器，游戏大厅&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e6%88%bf%e9%97%b4%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%b8%b8%e6%88%8f%e5%a4%a7%e5%8e%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;主要分为大厅服务器、匹配服务器、对战服务器&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252282323894.png&#34; src=&#34;images/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/image-20252282323894.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-redis哨兵模式主从切换源码分析</title>
      <link>https://weenable.github.io/posts/golang/go-redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 28 Feb 2025 19:04:12 +0800</pubDate>
      <guid>https://weenable.github.io/posts/golang/go-redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现原理&#34;&gt;&#xA;  实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过哨兵获取主节点信息：在连接 Redis 集群时，&lt;code&gt;go-redis&lt;/code&gt; 客户端会连接到一个或多个哨兵节点，获取当前的主节点信息。如果主节点发生故障，哨兵会进行故障转移，并通知客户端新的主节点信息。&lt;/li&gt;&#xA;&lt;li&gt;周期性地从哨兵获取主节点信息：&lt;code&gt;go-redis&lt;/code&gt; 客户端会周期性地向哨兵节点请求主节点信息，以确保它始终连接到当前的主节点。这个机制可以帮助客户端快速感知主从切换。&lt;/li&gt;&#xA;&lt;li&gt;在操作失败时重新获取主节点信息：如果客户端在执行操作时遇到连接错误或其他错误，可能会重新从哨兵节点获取主节点的信息，并重试操作。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;源码分析&#34;&gt;&#xA;  源码分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//rdb := redis.NewFailoverClient(&amp;amp;redis.FailoverOptions{&#xA;//    MasterName:    &amp;#34;mymaster&amp;#34;, // 哨兵配置中主节点的名字&#xA;//    SentinelAddrs: []string{&amp;#34;127.0.0.1:26379&amp;#34;, &amp;#34;127.0.0.1:26380&amp;#34;, &amp;#34;127.0.0.1:26381&amp;#34;},&#xA;//})&#xA;&#xA;&#xA;type FailoverOptions struct {&#xA;    MasterName    string&#xA;    SentinelAddrs []string&#xA;    // ... other options&#xA;}&#xA;&#xA;func NewFailoverClient(opt *FailoverOptions) *Client {&#xA;    sentinel := newSentinel(opt)&#xA;    return NewClient(&amp;amp;Options{&#xA;        Addr: sentinel.masterAddr(),&#xA;        // ... other options&#xA;    })&#xA;}&#xA;&#xA;func newSentinel(opt *FailoverOptions) *sentinel {&#xA;    // Connect to sentinel nodes and get master address&#xA;    return &amp;amp;sentinel{&#xA;        masterName: opt.MasterName,&#xA;        addrs:      opt.SentinelAddrs,&#xA;    }&#xA;}&#xA;&#xA;func (s *sentinel) masterAddr() string {&#xA;    // Get master address from sentinel nodes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;周期性刷新master地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (s *sentinel) periodicallyRefreshMasterAddr() {&#xA;    ticker := time.NewTicker(time.Minute)&#xA;    for range ticker.C {&#xA;        addr := s.masterAddr()&#xA;        // Update client&amp;#39;s master address&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;失败时重试和刷新master&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (c *Client) doWithRetry(fn func() error) error {&#xA;    for i := 0; i &amp;lt; maxRetries; i++ {&#xA;        err := fn()&#xA;        if err == nil {&#xA;            return nil&#xA;        }&#xA;        if isConnectionError(err) {&#xA;            c.refreshMasterAddr()&#xA;        }&#xA;        time.Sleep(retryBackoff)&#xA;    }&#xA;    return fmt.Errorf(&amp;#34;after %d retries, last error: %v&amp;#34;, maxRetries, err)&#xA;}&#xA;&#xA;func (c *Client) refreshMasterAddr() {&#xA;    addr := c.sentinel.masterAddr()&#xA;    c.Options().Addr = addr&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>实现redis客户端一致性哈希分片</title>
      <link>https://weenable.github.io/posts/golang/%E5%AE%9E%E7%8E%B0redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E5%88%86%E7%89%87/</link>
      <pubDate>Fri, 28 Feb 2025 19:03:16 +0800</pubDate>
      <guid>https://weenable.github.io/posts/golang/%E5%AE%9E%E7%8E%B0redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E5%88%86%E7%89%87/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现原理&#34;&gt;&#xA;  实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;哈希方案有以下几种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通哈希分片&lt;/li&gt;&#xA;&lt;li&gt;一致性哈希分片&lt;/li&gt;&#xA;&lt;li&gt;范围哈希分片&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;分片有以下几种方案：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;redis官方哈希槽分片方案（属于服务端sharding，使用范围哈希）&lt;/li&gt;&#xA;&lt;li&gt;客户端sharding，可以使用普通哈希、一致性哈希&lt;/li&gt;&#xA;&lt;li&gt;代理sharding，使用代理器进行分片，有性能损耗&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;客户端通过一致性哈希实现分片&#34;&gt;&#xA;  客户端通过一致性哈希实现分片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e9%80%9a%e8%bf%87%e4%b8%80%e8%87%b4%e6%80%a7%e5%93%88%e5%b8%8c%e5%ae%9e%e7%8e%b0%e5%88%86%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;context&amp;#34;&#xA;&#x9;&amp;#34;github.com/go-redis/redis/v8&amp;#34;&#xA;&#x9;&amp;#34;github.com/stathat/consistent&amp;#34;&#xA;)&#xA;&#xA;// 初始化支持一致性哈希的客户端结构&#xA;type ShardingClient struct {&#xA;&#x9;consistentHash *consistent.Consistent&#xA;&#x9;clients        map[string]*redis.Client&#xA;}&#xA;&#xA;func NewShardingClient(addrs []string) *ShardingClient {&#xA;&#x9;ch := consistent.New()&#xA;&#x9;clients := make(map[string]*redis.Client)&#xA;&#xA;&#x9;for _, addr := range addrs {&#xA;&#x9;&#x9;ch.Add(addr)&#xA;&#x9;&#x9;clients[addr] = redis.NewClient(&amp;amp;redis.Options{&#xA;&#x9;&#x9;&#x9;Addr: addr,&#xA;&#x9;&#x9;})&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;amp;ShardingClient{&#xA;&#x9;&#x9;consistentHash: ch,&#xA;&#x9;&#x9;clients:        clients,&#xA;&#x9;}&#xA;}&#xA;&#xA;// getClient 根据键获取相应的 Redis 客户端&#xA;func (sc *ShardingClient) getClient(key string) (*redis.Client, error) {&#xA;&#x9;addr, err := sc.consistentHash.Get(key)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return nil, err&#xA;&#x9;}&#xA;&#x9;return sc.clients[addr], nil&#xA;}&#xA;&#xA;// Set 在相应的 Redis 实例上设置键值对&#xA;func (sc *ShardingClient) Set(ctx context.Context, key, value string) error {&#xA;&#x9;client, err := sc.getClient(key)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return client.Set(ctx, key, value, 0).Err()&#xA;}&#xA;&#xA;// Get 在相应的 Redis 实例上获取键值对&#xA;func (sc *ShardingClient) Get(ctx context.Context, key string) (string, error) {&#xA;&#x9;client, err := sc.getClient(key)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return &amp;#34;&amp;#34;, err&#xA;&#x9;}&#xA;&#x9;return client.Get(ctx, key).Result()&#xA;}&#xA;&#xA;&#xA;func main() {&#xA;&#x9;addrs := []string{&#xA;&#x9;&#x9;&amp;#34;127.0.0.1:6379&amp;#34;,&#xA;&#x9;&#x9;&amp;#34;127.0.0.1:6380&amp;#34;,&#xA;&#x9;&#x9;&amp;#34;127.0.0.1:6381&amp;#34;,&#xA;&#x9;}&#xA;&#xA;&#x9;// 初始化 Sharding 客户端&#xA;&#x9;shardingClient := NewShardingClient(addrs)&#xA;&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;// 测试连接和操作&#xA;&#x9;err := shardingClient.Set(ctx, &amp;#34;key&amp;#34;, &amp;#34;value&amp;#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&amp;#34;Failed to set key: %v&amp;#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;val, err := shardingClient.Get(ctx, &amp;#34;key&amp;#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&amp;#34;Failed to get key: %v&amp;#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&amp;#34;key: %s\n&amp;#34;, val)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>go内存池实现</title>
      <link>https://weenable.github.io/posts/golang/go%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 18:57:27 +0800</pubDate>
      <guid>https://weenable.github.io/posts/golang/go%E5%86%85%E5%AD%98%E6%B1%A0%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现&#34;&gt;&#xA;  实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;用于管理固定大小的字节切片（&lt;code&gt;[]byte&lt;/code&gt;）。内存池的目的在于减少内存分配和垃圾回收的开销，通过重用已经分配的内存块来提高性能&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;type&lt;/span&gt; MemoryPool &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;chan&lt;/span&gt; []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 从内存池中返回长度为8的字节切片，如果内存池中没有可用字节切片则新分配&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (l MemoryPool) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Borrow&lt;/span&gt;() []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; buf []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; buf = &amp;lt;-l:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;buf = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;, 8)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; buf[:8]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 将字节切片放回内存池&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (l MemoryPool) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Return&lt;/span&gt;(buf []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; l &amp;lt;- buf:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 垃圾回收&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; mp MemoryPool = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;chan&lt;/span&gt; []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;, 1024)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sl := mp.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Borrow&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mp.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Return&lt;/span&gt;(sl)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
