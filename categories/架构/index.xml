<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Ween&#39;s Blog</title>
    <link>https://weenable.github.io/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Ween&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 19:19:48 +0800</lastBuildDate>
    <atom:link href="https://weenable.github.io/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于redis的分布式锁实现</title>
      <link>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:19:48 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h4 class=&#34;heading&#34; id=&#34;分布式锁安全和失效保障&#34;&gt;&#xA;  分布式锁安全和失效保障&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81%e5%ae%89%e5%85%a8%e5%92%8c%e5%a4%b1%e6%95%88%e4%bf%9d%e9%9a%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;算法只需要具备3个特性就可以实现最低保障的分布式锁&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;安全属性：独享，任意时刻只有一个客户端持有锁&lt;/li&gt;&#xA;&lt;li&gt;活性A：无死锁，即便持有锁客户端崩溃或网络分裂，锁仍然可以被获取&lt;/li&gt;&#xA;&lt;li&gt;活性B：容错，只要大部分redis节点存活，客户端即可获取和释放锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;单redis实例实现&#34;&gt;&#xA;  单redis实例实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95redis%e5%ae%9e%e4%be%8b%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用锁命令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NX 不存在key才执行&lt;/li&gt;&#xA;&lt;li&gt;PX超时&lt;/li&gt;&#xA;&lt;li&gt;random_value随机值，确保可以安全释放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SET name random_value NX PX 3000&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;释放锁&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if redis.call(&amp;#34;get&amp;#34;,KEYS[1]) == ARGV[1] then&#xA;    return redis.call(&amp;#34;del&amp;#34;,KEYS[1])&#xA;else&#xA;    return 0&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 class=&#34;heading&#34; id=&#34;单实例配合故障转移实现&#34;&gt;&#xA;  单实例配合故障转移实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8d%95%e5%ae%9e%e4%be%8b%e9%85%8d%e5%90%88%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;在单实例实现中存在单点失败问题，如果增加salve形成主从结构，当主从存在延迟时会导致从并没同步到锁的状态导致安全失效&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;redlock实现&#34;&gt;&#xA;  RedLock实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redlock%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;假设有N个redis master节点，在这种算法情况下客户端获取锁&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;获取当前unix时间戳，单位为毫秒&lt;/li&gt;&#xA;&lt;li&gt;依次尝试从N个实例使用相同的key和随机值获取锁，并且获取锁时设置一个网络超时时间，并且这个时间&amp;lt;锁失效时间&lt;/li&gt;&#xA;&lt;li&gt;客户端使用当前时间减去获取锁时刻时间得到获取锁耗时，只有从大多数节点获取到锁并且使用时间小于锁失效时间，锁才算获取成功&lt;/li&gt;&#xA;&lt;li&gt;锁的真正有效时间是有效时间减去获取锁所使用的时间&lt;/li&gt;&#xA;&lt;li&gt;如果获取锁失败，则应尽快在所有实例上释放锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;redsyncgo&#34;&gt;&#xA;  redsync.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redsyncgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// redsync.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;math/rand&amp;#34;&#xA;&#x9;&amp;#34;time&amp;#34;&#xA;)&#xA;&#xA;// 最小最大延迟重试时间&#xA;const (&#xA;&#x9;minRetryDelayMilliSec = 50&#xA;&#x9;maxRetryDelayMilliSec = 250&#xA;)&#xA;&#xA;type RedSync struct {&#xA;&#x9;pools []*Pool&#xA;}&#xA;&#xA;func New(pool ...*Pool) *RedSync {&#xA;&#x9;return &amp;amp;RedSync{pools: pool}&#xA;}&#xA;&#xA;func (r *RedSync) NewMutex(name string, options ...MutexOption) *Mutex {&#xA;&#x9;m := &amp;amp;Mutex{&#xA;&#x9;&#x9;name:   name,&#xA;&#x9;&#x9;expiry: 8 * time.Second, // 8s过期&#xA;&#x9;&#x9;tries:  32, // 最大重试32次&#xA;&#x9;&#x9;delayFunc: func(tries int) time.Duration {&#xA;&#x9;&#x9;&#x9;return time.Duration(rand.Intn(maxRetryDelayMilliSec-minRetryDelayMilliSec)+minRetryDelayMilliSec) * time.Millisecond&#xA;&#x9;&#x9;}, // 延迟数值计算函数&#xA;&#x9;&#x9;genValueFunc:  genValue, // 随机值生成函数&#xA;&#x9;&#x9;driftFactor:   0.01, // 到达过期时间漂移因子&#xA;&#x9;&#x9;timeoutFactor: 0.05, // 获取锁超时时间漂移因子&#xA;&#x9;&#x9;quorum:        len(r.pools)/2 + 1, // 成功获取到锁的节点数&#xA;&#x9;&#x9;pools:         r.pools, // redis节点池&#xA;&#x9;}&#xA;&#xA;&#x9;for _, o := range options {&#xA;&#x9;&#x9;o(m)&#xA;&#x9;}&#xA;&#xA;&#x9;return m&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;mutexgo&#34;&gt;&#xA;  mutex.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mutexgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// mutex.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;context&amp;#34;&#xA;&#x9;&amp;#34;crypto/rand&amp;#34;&#xA;&#x9;&amp;#34;encoding/base64&amp;#34;&#xA;&#x9;&amp;#34;errors&amp;#34;&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;&#x9;&amp;#34;github.com/hashicorp/go-multierror&amp;#34;&#xA;&#x9;&amp;#34;time&amp;#34;&#xA;)&#xA;&#xA;type Mutex struct {&#xA;&#x9;expiry        time.Duration&#xA;&#x9;name          string&#xA;&#x9;timeoutFactor float64&#xA;&#x9;driftFactor   float64&#xA;&#x9;tries         int&#xA;&#x9;pools         []*Pool&#xA;&#x9;failFast      bool&#xA;&#x9;quorum        int&#xA;&#x9;value         string&#xA;&#x9;until         time.Time&#xA;&#x9;delayFunc     func(int) time.Duration&#xA;&#x9;genValueFunc  func() (string, error)&#xA;}&#xA;&#xA;func (m *Mutex) Unlock() (bool, error) {&#xA;&#x9;return m.UnlockContext(context.Background())&#xA;}&#xA;&#xA;func (m *Mutex) UnlockContext(ctx context.Context) (bool, error) {&#xA;&#x9;n, err := m.actOnPoolAsync(ctx, m.release, m.value)&#xA;&#x9;if n &amp;lt; m.quorum {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;return true, nil&#xA;}&#xA;&#xA;func (m *Mutex) Lock() error {&#xA;&#x9;return m.LockContext(context.Background())&#xA;}&#xA;&#xA;func (m *Mutex) LockContext(ctx context.Context) error {&#xA;&#x9;value, err := m.genValueFunc()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#xA;&#x9;var timer *time.Timer&#xA;&#x9;for i := 0; i &amp;lt; m.tries; i++ {&#xA;&#x9;&#x9;// 重试延迟&#xA;&#x9;&#x9;if i != 0 {&#xA;&#x9;&#x9;&#x9;if timer == nil {&#xA;&#x9;&#x9;&#x9;&#x9;timer = time.NewTimer(m.delayFunc(i))&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;timer.Reset(m.delayFunc(i))&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;select {&#xA;&#x9;&#x9;&#x9;case &amp;lt;-ctx.Done():&#xA;&#x9;&#x9;&#x9;&#x9;timer.Stop()&#xA;&#x9;&#x9;&#x9;&#x9;return ErrFailed&#xA;&#x9;&#x9;&#x9;case &amp;lt;-timer.C:&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;start := time.Now()&#xA;&#xA;&#x9;&#x9;n, err := m.actOnPoolAsync(ctx, m.acquire, value)&#xA;&#xA;&#x9;&#x9;now := time.Now()&#xA;&#x9;&#x9;until := now.Add(m.expiry - now.Sub(start) - time.Duration(int64(float64(m.expiry)*m.driftFactor)))&#xA;&#x9;&#x9;if n &amp;gt;= m.quorum &amp;amp;&amp;amp; now.Before(until) {&#xA;&#x9;&#x9;&#x9;m.value = value&#xA;&#x9;&#x9;&#x9;m.until = until&#xA;&#x9;&#x9;&#x9;return nil&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// 如果没有最终获取锁成功，快速释放掉已经获取的子锁&#xA;&#x9;&#x9;m.actOnPoolAsync(ctx, m.release, value)&#xA;&#xA;&#x9;&#x9;// 达到最大尝试次数，并且有报错，直接返回&#xA;&#x9;&#x9;if i == m.tries-1 &amp;amp;&amp;amp; err != nil {&#xA;&#x9;&#x9;&#x9;return err&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return ErrFailed&#xA;}&#xA;&#xA;// 获取锁&#xA;func (m *Mutex) acquire(ctx context.Context, pool *Pool, value string) (bool, error) {&#xA;&#x9;conn, err := pool.Get(ctx)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;defer conn.Close()&#xA;&#x9;reply, err := conn.SetNX(m.name, value, m.expiry)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;return reply, nil&#xA;}&#xA;&#xA;var deleteScript = NewScript(1, `&#xA;&#x9;local val = redis.call(&amp;#34;GET&amp;#34;, KEYS[1])&#xA;&#x9;if val == ARGV[1] then&#xA;&#x9;&#x9;return redis.call(&amp;#34;DEL&amp;#34;, KEYS[1])&#xA;&#x9;elseif val == false then&#xA;&#x9;&#x9;return -1&#xA;&#x9;else&#xA;&#x9;&#x9;return 0&#xA;&#x9;end&#xA;`)&#xA;&#xA;// 释放锁，通过脚本执行&#xA;func (m *Mutex) release(ctx context.Context, pool *Pool, value string) (bool, error) {&#xA;&#x9;conn, err := pool.Get(ctx)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#x9;defer conn.Close()&#xA;&#x9;status, err := conn.Eval(deleteScript, m.name, value)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#xA;&#x9;if status == int64(-1) {&#xA;&#x9;&#x9;return false, ErrLockAlreadyExpired&#xA;&#x9;}&#xA;&#xA;&#x9;return status != int64(0), nil&#xA;}&#xA;&#xA;// 异步获取各节点的锁&#xA;func (m *Mutex) actOnPoolAsync(ctx context.Context, actFn func(context.Context, *Pool, string) (bool, error), value string) (int, error) {&#xA;&#xA;&#x9;ctx, cancel := context.WithTimeout(ctx, time.Duration(int64(float64(m.expiry)*m.timeoutFactor)))&#xA;&#x9;defer cancel()&#xA;&#xA;&#x9;type result struct {&#xA;&#x9;&#x9;node     int&#xA;&#x9;&#x9;statusOK bool&#xA;&#x9;&#x9;err      error&#xA;&#x9;}&#xA;&#x9;ch := make(chan result, len(m.pools))&#xA;&#x9;for node, pool := range m.pools {&#xA;&#x9;&#x9;go func(node int, pool *Pool) {&#xA;&#x9;&#x9;&#x9;r := result{node: node}&#xA;&#x9;&#x9;&#x9;r.statusOK, r.err = actFn(ctx, pool, value)&#xA;&#x9;&#x9;&#x9;ch &amp;lt;- r&#xA;&#x9;&#x9;}(node, pool)&#xA;&#x9;}&#xA;&#xA;&#x9;n := 0&#xA;&#x9;var err error&#xA;&#x9;taken := make([]int, 0)&#xA;&#xA;&#x9;for range m.pools {&#xA;&#x9;&#x9;r := &amp;lt;-ch&#xA;&#x9;&#x9;if r.statusOK {&#xA;&#x9;&#x9;&#x9;n++&#xA;&#x9;&#x9;} else if r.err == ErrLockAlreadyExpired {&#xA;&#x9;&#x9;&#x9;err = multierror.Append(err, ErrLockAlreadyExpired)&#xA;&#x9;&#x9;} else if r.err != nil {&#xA;&#x9;&#x9;&#x9;err = multierror.Append(err, errors.New(fmt.Sprintf(&amp;#34;redis error, node: %d err: %v&amp;#34;, r.node, r.err)))&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;taken = append(taken, r.node)&#xA;&#x9;&#x9;&#x9;err = multierror.Append(err, errors.New(fmt.Sprintf(&amp;#34;taken error, node: %d err: %v&amp;#34;, r.node, r.err)))&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if m.failFast {&#xA;&#x9;&#x9;&#x9;if n &amp;gt;= m.quorum {&#xA;&#x9;&#x9;&#x9;&#x9;return n, err&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if len(taken) &amp;gt;= m.quorum {&#xA;&#x9;&#x9;&#x9;&#x9;return n, &amp;amp;ErrTaken{Nodes: taken}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;if len(taken) &amp;gt;= m.quorum {&#xA;&#x9;&#x9;return n, &amp;amp;ErrTaken{Nodes: taken}&#xA;&#x9;}&#xA;&#xA;&#x9;return n, err&#xA;}&#xA;&#xA;func genValue() (string, error) {&#xA;&#x9;b := make([]byte, 16)&#xA;&#x9;_, err := rand.Read(b)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return &amp;#34;&amp;#34;, err&#xA;&#x9;}&#xA;&#xA;&#x9;return base64.StdEncoding.EncodeToString(b), nil&#xA;}&#xA;&#xA;type MutexOption func(*Mutex)&#xA;&#xA;func WithExpiry(expiry time.Duration) MutexOption {&#xA;&#x9;return func(m *Mutex) {&#xA;&#x9;&#x9;m.expiry = expiry&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;poolgo&#34;&gt;&#xA;  pool.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#poolgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// pool.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;context&amp;#34;&#xA;&#x9;&amp;#34;github.com/go-redis/redis&amp;#34;&#xA;)&#xA;&#xA;type Pool struct {&#xA;&#x9;redisClient *redis.Client&#xA;}&#xA;&#xA;func NewPool(redisClient *redis.Client) *Pool {&#xA;&#x9;return &amp;amp;Pool{redisClient: redisClient}&#xA;}&#xA;&#xA;func (p *Pool) Get(ctx context.Context) (*Conn, error) {&#xA;&#x9;c := p.redisClient&#xA;&#x9;if ctx != nil {&#xA;&#x9;&#x9;c = c.WithContext(ctx)&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;amp;Conn{c}, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;conngo&#34;&gt;&#xA;  conn.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#conngo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// conn.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;crypto/sha1&amp;#34;&#xA;&#x9;&amp;#34;encoding/hex&amp;#34;&#xA;&#x9;&amp;#34;github.com/go-redis/redis&amp;#34;&#xA;&#x9;&amp;#34;io&amp;#34;&#xA;&#x9;&amp;#34;strings&amp;#34;&#xA;&#x9;&amp;#34;time&amp;#34;&#xA;)&#xA;&#xA;type Conn struct {&#xA;&#x9;redisClient *redis.Client&#xA;}&#xA;&#xA;func (c *Conn) Close() error {&#xA;&#x9;return nil&#xA;}&#xA;&#xA;type Script struct {&#xA;&#x9;KeyCount int&#xA;&#x9;Src      string&#xA;&#x9;Hash     string&#xA;}&#xA;&#xA;func NewScript(keyCount int, src string) *Script {&#xA;&#x9;h := sha1.New()&#xA;&#x9;_, _ = io.WriteString(h, src)&#xA;&#x9;return &amp;amp;Script{&#xA;&#x9;&#x9;KeyCount: keyCount,&#xA;&#x9;&#x9;Src:      src,&#xA;&#x9;&#x9;Hash:     hex.EncodeToString(h.Sum(nil)),&#xA;&#x9;}&#xA;}&#xA;&#xA;func (c *Conn) SetNX(name string, value string, expiry time.Duration) (bool, error) {&#xA;&#x9;ok, err := c.redisClient.SetNX(name, value, expiry).Result()&#xA;&#x9;if err != redis.Nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#xA;&#x9;return ok, nil&#xA;}&#xA;&#xA;// 执行脚本&#xA;func (c *Conn) Eval(script *Script, keysAndArgs ...interface{}) (interface{}, error) {&#xA;&#x9;keys := make([]string, script.KeyCount)&#xA;&#x9;args := keysAndArgs&#xA;&#xA;&#x9;if script.KeyCount &amp;gt; 0 {&#xA;&#x9;&#x9;for i := 0; i &amp;lt; script.KeyCount; i++ {&#xA;&#x9;&#x9;&#x9;keys[i] = keysAndArgs[i].(string)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;args = keysAndArgs[script.KeyCount:]&#xA;&#x9;}&#xA;&#x9;v, err := c.redisClient.EvalSha(script.Hash, keys, args...).Result()&#xA;&#x9;if err != nil &amp;amp;&amp;amp; strings.HasPrefix(err.Error(), &amp;#34;NOSCRIPT&amp;#34;) {&#xA;&#x9;&#x9;v, err = c.redisClient.Eval(script.Src, keys, args...).Result()&#xA;&#x9;}&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return false, err&#xA;&#x9;}&#xA;&#xA;&#x9;return v, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;errorgo&#34;&gt;&#xA;  error.go&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#errorgo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// error.go&#xA;package distributedlock&#xA;&#xA;import (&#xA;&#x9;&amp;#34;errors&amp;#34;&#xA;&#x9;&amp;#34;fmt&amp;#34;&#xA;)&#xA;&#xA;var ErrFailed = errors.New(&amp;#34;redsync: failed to acquire lock&amp;#34;)&#xA;&#xA;var ErrLockAlreadyExpired = errors.New(&amp;#34;redsync: failed to unlock, lock already expired&amp;#34;)&#xA;&#xA;type ErrTaken struct {&#xA;&#x9;Nodes []int&#xA;}&#xA;&#xA;func (e *ErrTaken) Error() string {&#xA;&#x9;return fmt.Sprintf(&amp;#34;lock already taken, locked nodes: %v&amp;#34;, e.Nodes)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>分布式脑裂</title>
      <link>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E8%84%91%E8%A3%82/</link>
      <pubDate>Fri, 28 Feb 2025 19:18:43 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E8%84%91%E8%A3%82/</guid>
      <description>&lt;h4 class=&#34;heading&#34; id=&#34;脑裂定义&#34;&gt;&#xA;  脑裂定义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%84%91%e8%a3%82%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;一个整体的系统分裂成两个独立的节点，争夺共享资源造成系统混乱&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;出现脑裂的原因&#34;&gt;&#xA;  出现脑裂的原因&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%ba%e7%8e%b0%e8%84%91%e8%a3%82%e7%9a%84%e5%8e%9f%e5%9b%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;主心跳检测超时，导致主备切换，备提供服务后，主又恢复正常，出现双主&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;解决思路&#34;&gt;&#xA;  解决思路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%a3%e5%86%b3%e6%80%9d%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;仲裁机制&#xA;通过设置一个仲裁角色，定时探活主备，但是仲裁者会存在高可用和性能瓶颈&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;授权机制&#xA;假设slave已经提供服务，会有颁发的授权lease，假设master还在提供服务则lease必然是失效的，请求应当是失败的&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;隔离机制&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;共享资源fencing：确保只有一个master往共享存储提供写数据&lt;/li&gt;&#xA;&lt;li&gt;客户端fencing：确保只有一个master可以响应客户端请求&lt;/li&gt;&#xA;&lt;li&gt;slave fencing：确保只有一个master可以向slave下发命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>在线支付系统设计</title>
      <link>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 28 Feb 2025 19:14:00 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E6%9E%B6%E6%9E%84/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;支付系统基本概念&#34;&gt;&#xA;  支付系统基本概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%af%e4%bb%98%e7%b3%bb%e7%bb%9f%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单支付流程&#34;&gt;&#xA;  简单支付流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%94%af%e4%bb%98%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;最简单的支付流程只展示了正向支付的流程，当然还有退款流程、撤销流程等&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281435321.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281435321.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单清结算流程&#34;&gt;&#xA;  简单清结算流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%b8%85%e7%bb%93%e7%ae%97%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;支付系统和上游（如银行）是机构对机构的关系，通常使用清算概念，并且金融机构之间大部份情况下会有独立的清算机构做清算任务&lt;/li&gt;&#xA;&lt;li&gt;支付系统和商户之间通常使用结算概念，由支付系统直接大款给商户&lt;/li&gt;&#xA;&lt;li&gt;清算主要是把钱算清楚，结算主要是真实打款&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281457938.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281457938.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单本对本收单流程&#34;&gt;&#xA;  简单本对本收单流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%9c%ac%e5%af%b9%e6%9c%ac%e6%94%b6%e5%8d%95%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;所谓本对本收单，就是指商户的商品标价币种、向支付系统下单的币种、用户支付的币种、商户结算币种都是同一个币种，不涉及到外汇交易&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281522725.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281522725.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单跨境收单流程&#34;&gt;&#xA;  简单跨境收单流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e8%b7%a8%e5%a2%83%e6%94%b6%e5%8d%95%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;跨境收单就是结算给商户的币种和用户支付的币种不一样，需要经过外汇机构换汇&lt;/li&gt;&#xA;&lt;li&gt;在扣款EUR之后，支付系统会调用外汇机构进行锁定汇率（HA）&lt;/li&gt;&#xA;&lt;li&gt;在银行清算之后，支付平台再调用外汇机构进行换汇（TA）&lt;/li&gt;&#xA;&lt;li&gt;最后支付系统结算给商户&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281556354.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281556354.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;整个时序图如下：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281613881.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281613881.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;概要设计&#34;&gt;&#xA;  概要设计&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a6%82%e8%a6%81%e8%ae%be%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单产品架构图&#34;&gt;&#xA;  简单产品架构图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e4%ba%a7%e5%93%81%e6%9e%b6%e6%9e%84%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281633583.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281633583.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;简单系统架构图&#34;&gt;&#xA;  简单系统架构图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;较简单的一个本队本交易的支付系统架构&lt;/li&gt;&#xA;&lt;li&gt;复杂的支付系统可能还有外汇等子系统，甚至一个子系统可能会分为多个应用来部署，比如收单结算子系统拆分为收单、结算应用&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281651782.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281651782.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;复杂系统架构&#34;&gt;&#xA;  复杂系统架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e6%9d%82%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;比较完整的一个系统架构，里面划分了比较清楚的子域或模块&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281711947.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281711947.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;系统依赖图&#34;&gt;&#xA;  系统依赖图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e4%be%9d%e8%b5%96%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;红色链路为主要支付链路&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252281731832.png&#34; src=&#34;images/%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-20252281731832.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;常见术语&#34;&gt;&#xA;  常见术语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e6%9c%af%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;通用&#34;&gt;&#xA;  通用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%9a%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支付服务提供商：PSP，Payment Service Provider。为商户提供支付解决方案的公司。银行、第三方支付公司都属于支付服务提供商&lt;/li&gt;&#xA;&lt;li&gt;收单机构：Acuquiring Institution/Acquirer。负责处理和清算商户交易的金融机构或支付服务提供商（PSP）&lt;/li&gt;&#xA;&lt;li&gt;拍照：License。由监管机构或政府授予的官方许可，允许持牌者在特定的法律框架和规定内经营某种金融服务或支付业务。支付相关的牌照主要有：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;银行牌照：允许公司提供传统银行服务，例如接受存款、提供贷款等&lt;/li&gt;&#xA;&lt;li&gt;支付机构牌照：允许公司提供支付服务，如支付处理、资金转账、电子钱包服务等&lt;/li&gt;&#xA;&lt;li&gt;电子货币机构牌照：允许公司发行和管理电子货币，如预付卡、电子钱包中的资金等&lt;/li&gt;&#xA;&lt;li&gt;PA牌照：Payment Account，也就是储值牌照，用户可以先充值，后使用余额进行支付&lt;/li&gt;&#xA;&lt;li&gt;PG牌照：Payment Gateway。也就是支付网关牌照，只能调用外部渠道支付，不能有余额&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;展业：在指定的区域开展业务。通常和牌照申请、监管合规等放在一起&lt;/li&gt;&#xA;&lt;li&gt;收单产品：支付服务提供商为商户提供的支付服务&lt;/li&gt;&#xA;&lt;li&gt;担保交易：用户先把钱给到支付平台，用户确认收货再给钱到商家&lt;/li&gt;&#xA;&lt;li&gt;即时到帐：付款资金直接转移到收款账户，不需要用户二次确认&lt;/li&gt;&#xA;&lt;li&gt;资金产品：通常指与处理客户资金流动相关的服务，包括充值、转账、提现、代发等功能&lt;/li&gt;&#xA;&lt;li&gt;代发：公司或组织通过在线支付系统将资金直接转入个人账户。有代发到余额和代发到卡&lt;/li&gt;&#xA;&lt;li&gt;退款：Refund，一般指支付第二天的逆向行为，有部份退款和全额退款&lt;/li&gt;&#xA;&lt;li&gt;撤销：Cancel，一般指支付当天的逆向行为&lt;/li&gt;&#xA;&lt;li&gt;冲正：与撤销类似。来源于POS机时代，在交易发生当天用户申请退货退款时，或POS机支付超时的情况下，操作员发起一笔冲正，收单机构如果已经扣款就会退回&lt;/li&gt;&#xA;&lt;li&gt;T日/T+N日：T日：交易实际发生的日期，T+N：从交易日发生之后N个工作日。比如T+1清算，就是指交易完成后，第二天进行清算&lt;/li&gt;&#xA;&lt;li&gt;风控：交易的风险控制，欺诈检测、信用评估、合规检查&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;外汇&#34;&gt;&#xA;  外汇&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%96%e6%b1%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;锁汇：锁定汇率。在电商场景下，电商平台不愿意承担汇损风险，就直接在支付成功后，使用支付金额向外汇机构锁定一个固定汇率&lt;/li&gt;&#xA;&lt;li&gt;换汇：实际购汇。在电商场景下，电商平台不愿意承担汇损风险，在支付渠道清算后，使用原锁汇时的汇率，正式向外汇机构购汇，完成交割&lt;/li&gt;&#xA;&lt;li&gt;即期：按当前市场汇率立即交换两种货币。一般是2个工作日内交割。一般是场内交易&lt;/li&gt;&#xA;&lt;li&gt;远期：双方约定以当前确定汇率（远期汇率）在将来某天交换货币。一般是场外交易&lt;/li&gt;&#xA;&lt;li&gt;掉期：双方先通过即期交易，然后约定在远期时再换回来。一般是场外交易&lt;/li&gt;&#xA;&lt;li&gt;结汇入境：以入境中国为例。先在境外兑换成离岸人民币，再结算到境内银行账户或金融机构账户&lt;/li&gt;&#xA;&lt;li&gt;入境结汇：以入境中国为例。先以外币入境，在境内再兑换成人民币&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;资金账务&#34;&gt;&#xA;  资金账务&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b5%84%e9%87%91%e8%b4%a6%e5%8a%a1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会计日：标识一笔交易在会计层面的日期。交易需要跨多个子系统，完成一笔交易的时间在不同子系统中是不一样的。与自然日可能有差异，特别是交易在零点附近的时候，所以统一使用会计日来明确交易应该计入哪一天。有可能一笔交易发生在2023.12.23这天，但是交易记录在2023.12.24这个会计日内&lt;/li&gt;&#xA;&lt;li&gt;日切：会计日切换到下一天。在这个点之后，所有的交易会被记录到下一个会计日。日切之后，通常需要进行批处理，包括交易清算、账户余额更新、试算平衡等&lt;/li&gt;&#xA;&lt;li&gt;记账：交易记录到会计科目中&lt;/li&gt;&#xA;&lt;li&gt;复试记账：一种会计准则，要求每笔交易都要有两个或以上的账目变动来记录，使得借方和贷方的总金额相等&lt;/li&gt;&#xA;&lt;li&gt;头寸：通俗地说，就是余额情况。头寸不够，就是余额不够&lt;/li&gt;&#xA;&lt;li&gt;流动性调拨：在多个银行备付金账户中转账，以确保符合业务需求。比如因为一些特殊原因，所有用户当天通过CMB渠道只支付了400万，但是当天所有用户合计要在CMB渠道退款500万&lt;/li&gt;&#xA;&lt;li&gt;结算：收单机构把交易资金结转给商户。通常有结算到余额到结算到银行卡&lt;/li&gt;&#xA;&lt;li&gt;清算：机构之间进行交易资金的转移。通常会由专门的清算机构负责清算。本质和结算是一样的，只是结算通常用在收单机构与商户之间，清算用在持牌的金融机构之间&lt;/li&gt;&#xA;&lt;li&gt;轧差：清分过程中把当天应收和应付金额相互抵消，最终只有净额需要结算或清算，注意这个字读（gá）&lt;/li&gt;&#xA;&lt;li&gt;净清算额：轧差之后，各参与方需要转移的资金总额&lt;/li&gt;&#xA;&lt;li&gt;对账：比对交易双方的记账或资金。比如和渠道的对账。通常有明细对账和资金对账。前者就是对交易数据，按笔核对，后者对真实打款情况，当天交易100万，是否真实打款100万&lt;/li&gt;&#xA;&lt;li&gt;长款/短款：对账过程中发现实际的金额高于或低于账面金额&lt;/li&gt;&#xA;&lt;li&gt;计收费：支付平台针对手续费的记录和汇总。一般有商户计费和渠道计费&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
