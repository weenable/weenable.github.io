<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法数据结构 on Ween&#39;s Blog</title>
    <link>https://weenable.github.io/categories/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 算法数据结构 on Ween&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 19:24:41 +0800</lastBuildDate>
    <atom:link href="https://weenable.github.io/categories/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序算法汇总</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 28 Feb 2025 19:24:41 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h6 class=&#34;heading&#34; id=&#34;冒泡排序n2&#34;&gt;&#xA;  冒泡排序n^2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8fn2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;bubbleSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;done := &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list) - 1; i &amp;gt;= 0; i-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;done = &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := 0; j &amp;lt; i; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;gt; list[j+1] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;list[j], list[j+1] = list[j], list[j+1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;done = &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; done {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;选择排序n2&#34;&gt;&#xA;  选择排序n^2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8fn2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;selectSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list) - 1; i &amp;gt;= 0; i-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;maxIdx := 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := 1; j &amp;lt;= i; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;gt; list[maxIdx] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;maxIdx = j&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;list[maxIdx], list[i] = list[i], list[maxIdx]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;插入排序n2&#34;&gt;&#xA;  插入排序n^2&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8fn2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;insertSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list); i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := i; j &amp;gt; 0; j-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;lt; list[j-1] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;list[j], list[j-1] = list[j-1], list[j]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;归并排序nlgn&#34;&gt;&#xA;  归并排序nlgn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8fnlgn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mergeSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;merge := &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(l, r []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i, j := 0, 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(l) &amp;amp;&amp;amp; j &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; l[i] &amp;lt; r[j] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, l[i])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;i++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;} &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, r[j])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;j++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(l) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, l[i:]...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; j &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, r[j:]...)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; dm &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;dm = &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(ls []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(ls) == 1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ls&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ll := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dm&lt;/span&gt;(ls[:&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(ls)/2])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;lr := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dm&lt;/span&gt;(ls[&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(ls)/2:])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;merge&lt;/span&gt;(ll, lr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dm&lt;/span&gt;(list)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;快速排序nlgn&#34;&gt;&#xA;  快速排序nlgn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8fnlgn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;quickSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;part := &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(l, r &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;pv := list[r]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i := l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j := l; j &amp;lt; r; j++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[j] &amp;lt; pv {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;list[i], list[j] = list[j], list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;i++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;list[i], list[r] = list[r], list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;var&lt;/span&gt; df &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;df = &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt;(l, r &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; l &amp;gt;= r {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;p := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;part&lt;/span&gt;(l, r)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;df&lt;/span&gt;(l, p-1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;df&lt;/span&gt;(p+1, r)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;df&lt;/span&gt;(0, &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list)-1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;堆排序nlgn&#34;&gt;&#xA;  堆排序nlgn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a0%86%e6%8e%92%e5%ba%8fnlgn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;heapSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;minHeap := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 建堆，上浮&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;range&lt;/span&gt; list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;minHeap = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(minHeap, v)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;j := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) - 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; j &amp;gt; 0 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;parent := (j - 1) / 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; v &amp;gt;= minHeap[parent] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;minHeap[j] = minHeap[parent]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;j = parent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 取值，下沉&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;range&lt;/span&gt; minHeap {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 取堆顶&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;append&lt;/span&gt;(ret, minHeap[0])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 获取最后一个元素，并且挪到堆顶&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;x := minHeap[&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap)-1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;minHeap = minHeap[:&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap)-1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 没有元素了&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) == 0 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 对堆顶元素做下沉操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i := 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;l := 2*i + 1 &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 左孩子&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;r := 2*i + 2 &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 右孩子&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 如果没有左孩子，则停止下沉&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; l &amp;gt;= &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 如果有右孩子，则比较左右孩子得到比较小的孩子下标赋值给l&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; r &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(minHeap) &amp;amp;&amp;amp; minHeap[l] &amp;gt; minHeap[r] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;l = r&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 如果比最小的孩子还要小，则停止下沉&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; x &amp;lt;= minHeap[l] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 将较小的孩子提升上来&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;minHeap[i] = minHeap[l]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;i = l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;minHeap[i] = x&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h6 class=&#34;heading&#34; id=&#34;计数排序n&#34;&gt;&#xA;  计数排序n&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%a1%e6%95%b0%e6%8e%92%e5%ba%8fn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h6&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;countSort&lt;/span&gt;(list []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;maxNum := list[0]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 1; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list)-1; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; list[i] &amp;gt; maxNum {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;maxNum = list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 记录每个数的数量&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;count := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, maxNum+1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; _, v := &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;range&lt;/span&gt; list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;count[v]++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 记录每个数的位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 1; i &amp;lt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(count); i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;count[i] += count[i-1]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 从后往前遍历，保证稳定性&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(list) - 1; i &amp;gt;= 0; i-- {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;idx := count[list[i]] - 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret[idx] = list[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;count[list[i]]--&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>二分查找算法汇总</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 28 Feb 2025 19:23:48 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;二分查找原题&#34;&gt;&#xA;  二分查找原题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e5%8e%9f%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/binary-search/&#34;&gt;https://leetcode.cn/problems/binary-search/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;注意计算mid的时候不要用(left+right) / 2，因为可能会溢出&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func search(nums []int, target int) int {&#xA;    n := len(nums)&#xA;&#xA;    left := 0&#xA;    right := n-1&#xA;    for left &amp;lt;= right {&#xA;        mid := left + ((right - left) / 2)&#xA;        if nums[mid] == target {&#xA;            return mid&#xA;        }&#xA;&#xA;        if nums[mid] &amp;gt; target {&#xA;            right = mid-1&#xA;        } else {&#xA;            left = mid+1&#xA;        }&#xA;    }&#xA;    return -1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;搜索插入位置&#34;&gt;&#xA;  搜索插入位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%90%9c%e7%b4%a2%e6%8f%92%e5%85%a5%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/search-insert-position/&#34;&gt;https://leetcode.cn/problems/search-insert-position/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过二分查找值&lt;/li&gt;&#xA;&lt;li&gt;插入位置默认为数组末尾，如果mid所在的数比target大，则更新插入位置为mid&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func searchInsert(nums []int, target int) int {&#xA;    n := len(nums)&#xA;    left, right := 0, n-1&#xA;    ret := n&#xA;&#xA;    for left &amp;lt;= right {&#xA;        mid := left + ((right - left) / 2)&#xA;        if nums[mid] == target {&#xA;            return mid&#xA;        }&#xA;&#xA;&#x9;&#x9;// 如果mid所在的数比target大，则更新插入位置为mid&#xA;        if nums[mid] &amp;gt; target {&#xA;            right = mid-1&#xA;            ret = mid&#xA;        } else {&#xA;            left = mid + 1&#xA;        }&#xA;&#xA;    }&#xA;    return ret&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 class=&#34;heading&#34; id=&#34;查找元素出现的第一个和最后一个位置&#34;&gt;&#xA;  查找元素出现的第一个和最后一个位置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e6%89%be%e5%85%83%e7%b4%a0%e5%87%ba%e7%8e%b0%e7%9a%84%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%92%8c%e6%9c%80%e5%90%8e%e4%b8%80%e4%b8%aa%e4%bd%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/&#34;&gt;https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>跳表和实现</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:07:07 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;数据结构示意图&#34;&gt;&#xA;  数据结构示意图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%a4%ba%e6%84%8f%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228725321.png&#34; src=&#34;images/%E8%B7%B3%E8%A1%A8%E5%92%8C%E5%AE%9E%E7%8E%B0/image-2025228725321.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import &amp;#34;math/rand&amp;#34;&#xA;&#xA;const (&#xA;&#x9;MaxLevel    = 16  // 跳表的最大层数&#xA;&#x9;Probability = 0.5 // 随机提升层数的概率&#xA;)&#xA;&#xA;type SkipList struct {&#xA;&#x9;head  *Node&#xA;&#x9;level int&#xA;}&#xA;&#xA;type Node struct {&#xA;&#x9;key   int&#xA;&#x9;value string&#xA;&#x9;next  []*Node&#xA;}&#xA;&#xA;func randomLevel() int {&#xA;&#x9;level := 1&#xA;&#x9;for rand.Float64() &amp;lt; Probability &amp;amp;&amp;amp; level &amp;lt; MaxLevel {&#xA;&#x9;&#x9;level++&#xA;&#x9;}&#xA;&#x9;return level&#xA;}&#xA;&#xA;func NewSkipList() *SkipList {&#xA;&#x9;return &amp;amp;SkipList{&#xA;&#x9;&#x9;head:  NewNode(0, &amp;#34;&amp;#34;, MaxLevel),&#xA;&#x9;&#x9;level: 1,&#xA;&#x9;}&#xA;}&#xA;&#xA;func NewNode(key int, value string, level int) *Node {&#xA;&#x9;return &amp;amp;Node{&#xA;&#x9;&#x9;key:   key,&#xA;&#x9;&#x9;value: value,&#xA;&#x9;&#x9;next:  make([]*Node, level),&#xA;&#x9;}&#xA;}&#xA;&#xA;// 插入元素&#xA;func (sl *SkipList) Insert(key int, value string) {&#xA;&#x9;update := make([]*Node, MaxLevel)&#xA;&#x9;node := sl.head&#xA;&#xA;&#x9;// 找到每一层最后一个&amp;lt;key的节点放入update中&#xA;&#x9;for i := sl.level - 1; i &amp;gt;= 0; i-- {&#xA;&#x9;&#x9;for node.next[i] != nil &amp;amp;&amp;amp; node.next[i].key &amp;lt; key {&#xA;&#x9;&#x9;&#x9;node = node.next[i]&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;update[i] = node&#xA;&#x9;}&#xA;&#xA;&#x9;// 随机层数&#xA;&#x9;level := randomLevel()&#xA;&#x9;// 将&amp;gt;sl.level的层，sl.head加入update中&#xA;&#x9;if level &amp;gt; sl.level {&#xA;&#x9;&#x9;for i := sl.level; i &amp;lt; level; i++ {&#xA;&#x9;&#x9;&#x9;update[i] = sl.head&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;sl.level = level&#xA;&#x9;}&#xA;&#xA;&#x9;// 将新节点加入跳表&#xA;&#x9;newNode := NewNode(key, value, level)&#xA;&#x9;for i := 0; i &amp;lt; level; i++ {&#xA;&#x9;&#x9;newNode.next[i] = update[i].next[i]&#xA;&#x9;&#x9;update[i].next[i] = newNode&#xA;&#x9;}&#xA;}&#xA;&#xA;// 查找元素&#xA;func (sl *SkipList) Search(key int) (string, bool) {&#xA;&#x9;// 从最高层开始往下，找到最后一个比key小的节点&#xA;&#x9;node := sl.head&#xA;&#x9;for i := sl.level - 1; i &amp;gt;= 0; i-- {&#xA;&#x9;&#x9;for node.next[i] != nil &amp;amp;&amp;amp; node.next[i].key &amp;lt; key {&#xA;&#x9;&#x9;&#x9;node = node.next[i]&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;node = node.next[0]&#xA;&#x9;if node != nil &amp;amp;&amp;amp; node.key == key {&#xA;&#x9;&#x9;return node.value, true&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;#34;&amp;#34;, false&#xA;}&#xA;&#xA;// 删除元素&#xA;func (sl *SkipList) Delete(key int) bool {&#xA;&#x9;update := make([]*Node, MaxLevel)&#xA;&#xA;&#x9;// 从最高层开始往下，找到最后一个比key小的节点&#xA;&#x9;node := sl.head&#xA;&#x9;for i := sl.level; i &amp;gt;= 0; i-- {&#xA;&#x9;&#x9;for node.next[i] != nil &amp;amp;&amp;amp; node.next[i].key &amp;lt; key {&#xA;&#x9;&#x9;&#x9;node = node.next[i]&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;update[i] = node&#xA;&#x9;}&#xA;&#xA;&#x9;// 判断元素是否存在&#xA;&#x9;node = node.next[0]&#xA;&#x9;if node == nil || node.key != key {&#xA;&#x9;&#x9;return false&#xA;&#x9;}&#xA;&#xA;&#x9;// 从第1层开始往上，剔除目标节点&#xA;&#x9;for i := 0; i &amp;lt; sl.level; i++ {&#xA;&#x9;&#x9;if update[i].next[i] != node {&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;update[i].next[i] = node.next[i]&#xA;&#x9;}&#xA;&#xA;&#x9;// 如果高层除了头节点没有多余节点，则降层&#xA;&#x9;for sl.level &amp;gt; 1 &amp;amp;&amp;amp; sl.head.next[sl.level-1] == nil {&#xA;&#x9;&#x9;sl.level--&#xA;&#x9;}&#xA;&#xA;&#x9;return true&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;sl := skiplist.NewSkipList()&#xA;&#x9;sl.Insert(1, &amp;#34;Hello&amp;#34;)&#xA;&#x9;sl.Insert(2, &amp;#34;World&amp;#34;)&#xA;&#x9;sl.Insert(3, &amp;#34;SkipList&amp;#34;)&#xA;&#xA;&#x9;if value, found := sl.Search(2); found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found key 2 with value:&amp;#34;, value)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Key 2 not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;sl.Delete(2)&#xA;&#x9;if value, found := sl.Search(2); found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found key 2 with value:&amp;#34;, value)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Key 2 not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>哈希表渐进式Rehash实现</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:06:04 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%B8%90%E8%BF%9B%E5%BC%8Frehash%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;说明&#34;&gt;&#xA;  说明&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b4%e6%98%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;哈希冲突采用链地址法&lt;/li&gt;&#xA;&lt;li&gt;在操作中进行渐进式扩容迁移&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;// 初始哈希表大小&#xA;const initialSize = 4&#xA;&#xA;// 哈希表元素&#xA;type entry struct {&#xA;&#x9;key   string&#xA;&#x9;value interface{}&#xA;&#x9;next  *entry&#xA;}&#xA;&#xA;type dict struct {&#xA;&#x9;ht          [2][]*entry&#xA;&#x9;rehashIndex int&#xA;}&#xA;&#xA;func NewDict() *dict {&#xA;&#x9;d := &amp;amp;dict{&#xA;&#x9;&#x9;ht:          [2][]*entry{make([]*entry, initialSize), nil},&#xA;&#x9;&#x9;rehashIndex: -1,&#xA;&#x9;}&#xA;&#xA;&#x9;return d&#xA;}&#xA;&#xA;// 实现一个哈希函数&#xA;func (d *dict) hash(key string) int {&#xA;&#x9;h := 0&#xA;&#x9;for i := 0; i &amp;lt; len(key); i++ {&#xA;&#x9;&#x9;h = 31*h + int(key[i])&#xA;&#x9;}&#xA;&#xA;&#x9;return h&#xA;}&#xA;&#xA;// 插入元素&#xA;func (d *dict) Add(key string, value interface{}) {&#xA;&#x9;if d.rehashIndex != -1 {&#xA;&#x9;&#x9;d.rehash()&#xA;&#x9;}&#xA;&#xA;&#x9;// 如果此刻没有在渐进扩容期间，并且当前元素个数&amp;gt;=容量一半，触发渐进扩容&#xA;&#x9;if d.ht[1] == nil &amp;amp;&amp;amp; len(d.ht[0]) &amp;gt; 0 &amp;amp;&amp;amp; len(d.ht[0]) &amp;gt;= cap(d.ht[0])/2 {&#xA;&#x9;&#x9;d.ht[1] = make([]*entry, len(d.ht[0])*2) //扩容一倍&#xA;&#x9;&#x9;d.rehashIndex = 0&#xA;&#x9;}&#xA;&#xA;&#x9;index := d.hash(key) % len(d.ht[0])&#xA;&#x9;newEntry := &amp;amp;entry{key: key, value: value, next: d.ht[0][index]}&#xA;&#x9;d.ht[0][index] = newEntry&#xA;}&#xA;&#xA;// 获取元素&#xA;func (d *dict) Get(key string) (interface{}, bool) {&#xA;&#x9;if d.rehashIndex != -1 {&#xA;&#x9;&#x9;d.rehash()&#xA;&#x9;}&#xA;&#xA;&#x9;// 在h[0]中找&#xA;&#x9;index := d.hash(key) % len(d.ht[0])&#xA;&#x9;for curEntry := d.ht[0][index]; curEntry != nil; curEntry = curEntry.next {&#xA;&#x9;&#x9;if curEntry.key == key {&#xA;&#x9;&#x9;&#x9;return curEntry.value, true&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;// 在h[1]中找，已经迁移&#xA;&#x9;if d.ht[1] != nil {&#xA;&#x9;&#x9;index = d.hash(key) % len(d.ht[1])&#xA;&#x9;&#x9;for entry := d.ht[1][index]; entry != nil; entry = entry.next {&#xA;&#x9;&#x9;&#x9;if entry.key == key {&#xA;&#x9;&#x9;&#x9;&#x9;return entry.value, true&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return nil, false&#xA;}&#xA;&#xA;// 渐进rehash执行的函数&#xA;func (d *dict) rehash() {&#xA;&#x9;if d.rehashIndex == -1 {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;// 渐进移动一个桶的数据&#xA;&#x9;for i := 0; i &amp;lt; 1 &amp;amp;&amp;amp; d.rehashIndex &amp;lt; len(d.ht[0]); i++ {&#xA;&#x9;&#x9;if d.ht[0][d.rehashIndex] != nil {&#xA;&#x9;&#x9;&#x9;curEntry := d.ht[0][d.rehashIndex]&#xA;&#x9;&#x9;&#x9;for curEntry != nil {&#xA;&#x9;&#x9;&#x9;&#x9;nextEntry := curEntry.next&#xA;&#x9;&#x9;&#x9;&#x9;index := d.hash(curEntry.key) % len(d.ht[1])&#xA;&#x9;&#x9;&#x9;&#x9;curEntry.next = d.ht[1][index]&#xA;&#x9;&#x9;&#x9;&#x9;d.ht[1][index] = curEntry&#xA;&#x9;&#x9;&#x9;&#x9;curEntry = nextEntry&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;d.ht[0][d.rehashIndex] = nil&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;d.rehashIndex++&#xA;&#x9;}&#xA;&#xA;&#x9;if d.rehashIndex &amp;gt;= len(d.ht[0]) {&#xA;&#x9;&#x9;d.ht[0] = d.ht[1]&#xA;&#x9;&#x9;d.ht[1] = nil&#xA;&#x9;&#x9;d.rehashIndex = -1&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;func main() {&#xA;&#x9;d := rehash.NewDict()&#xA;&#x9;d.Add(&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;)&#xA;&#x9;d.Add(&amp;#34;baz&amp;#34;, &amp;#34;qux&amp;#34;)&#xA;&#xA;&#x9;val, found := d.Get(&amp;#34;foo&amp;#34;)&#xA;&#x9;if found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found foo:&amp;#34;, val)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;foo not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;val, found = d.Get(&amp;#34;baz&amp;#34;)&#xA;&#x9;if found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found baz:&amp;#34;, val)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;baz not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;// 加这两个元素前已经触发扩容，因为设定元素个数&amp;gt;=容量一半则扩容&#xA;&#x9;d.Add(&amp;#34;new&amp;#34;, &amp;#34;value&amp;#34;)&#xA;&#x9;d.Add(&amp;#34;another&amp;#34;, &amp;#34;entry&amp;#34;)&#xA;&#xA;&#x9;val, found = d.Get(&amp;#34;new&amp;#34;)&#xA;&#x9;if found {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;Found new:&amp;#34;, val)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&amp;#34;new not found&amp;#34;)&#xA;&#x9;}&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>布隆过滤器算法实现</title>
      <link>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 28 Feb 2025 19:01:03 +0800</pubDate>
      <guid>https://weenable.github.io/posts/%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h5 class=&#34;heading&#34; id=&#34;实现原理&#34;&gt;&#xA;  实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;布隆过滤器由一个位数组（bit array）和多个哈希函数（hash functions）组成。其工作原理如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建一个长度为 &lt;code&gt;m&lt;/code&gt; 的位数组，将所有位初始化为 0。&lt;/li&gt;&#xA;&lt;li&gt;选择 &lt;code&gt;k&lt;/code&gt; 个独立的哈希函数，每个哈希函数将输入映射到 &lt;code&gt;[0, m-1]&lt;/code&gt; 范围内的一个位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;插入元素&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于要插入的元素，通过 &lt;code&gt;k&lt;/code&gt; 个哈希函数分别计算出 &lt;code&gt;k&lt;/code&gt; 个哈希值。&lt;/li&gt;&#xA;&lt;li&gt;将位数组中这 &lt;code&gt;k&lt;/code&gt; 个位置的值设置为 1。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;查询元素&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于要查询的元素，通过 &lt;code&gt;k&lt;/code&gt; 个哈希函数分别计算出 &lt;code&gt;k&lt;/code&gt; 个哈希值。&lt;/li&gt;&#xA;&lt;li&gt;检查位数组中这 &lt;code&gt;k&lt;/code&gt; 个位置的值，如果所有位置的值都为 1，则认为该元素可能在集合中；如果有任何一个位置的值为 0，则认为该元素不在集合中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228218354.png&#34; src=&#34;images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/image-2025228218354.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;代码实现&#34;&gt;&#xA;  代码实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;package&lt;/span&gt; bloomfilter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;hash/fnv&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;type&lt;/span&gt; BloomFilter &lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;bitset []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//比特数组&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m      &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//比特数组长度&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;k      &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//哈希函数数量&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;NewBloomFilter&lt;/span&gt;(n &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt;, p &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;float64&lt;/span&gt;) *BloomFilter {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;int&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Ceil&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;float64&lt;/span&gt;(-n) * math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Log&lt;/span&gt;(p) / math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Pow&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Log&lt;/span&gt;(2), 2)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;k := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;int&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Ceil&lt;/span&gt;(math.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Log&lt;/span&gt;(2) * &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;float64&lt;/span&gt;(m) / &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;float64&lt;/span&gt;(n)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &amp;amp;BloomFilter{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;bitset: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt;, m),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;m:      m,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;k:      k,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 哈希函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (bf *BloomFilter) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hash&lt;/span&gt;(data []&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;byte&lt;/span&gt;, seed &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;uint32&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;h := fnv.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;New32a&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;h.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Write&lt;/span&gt;(data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;hash := h.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Sum32&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;int&lt;/span&gt;((hash + seed) % &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;uint32&lt;/span&gt;(bf.m))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 添加元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (bf *BloomFilter) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Add&lt;/span&gt;(item &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; bf.k; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;pos := bf.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hash&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;byte&lt;/span&gt;(item), &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;uint32&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;bf.bitset[pos] = &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// 查找元素&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; (bf *BloomFilter) &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Contains&lt;/span&gt;(item &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; bf.k; i++ {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;pos := bf.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hash&lt;/span&gt;([]&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;byte&lt;/span&gt;(item), &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;uint32&lt;/span&gt;(i))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; !bf.bitset[pos] {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
