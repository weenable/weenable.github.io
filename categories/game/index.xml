<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Game on Ween&#39;s Blog</title>
    <link>https://weenable.github.io/categories/game/</link>
    <description>Recent content in Game on Ween&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 19:08:15 +0800</lastBuildDate>
    <atom:link href="https://weenable.github.io/categories/game/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络游戏同步机制</title>
      <link>https://weenable.github.io/posts/game/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 28 Feb 2025 19:08:15 +0800</pubDate>
      <guid>https://weenable.github.io/posts/game/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;网络同步&#34;&gt;&#xA;  网络同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;网络同步 = 数据同步 + 表现同步&#xA;网络同步一般分为帧同步和状态同步&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;帧同步&#34;&gt;&#xA;  帧同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%a7%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;基本原理&#34;&gt;&#xA;  基本原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;计算逻辑在客户端，按照一定的帧速率（逻辑帧而非渲染帧），服务端只转发&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;帧同步缺陷&#34;&gt;&#xA;  帧同步缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%a7%e5%90%8c%e6%ad%a5%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;计算逻辑不在服务端，容易出现外挂&lt;/li&gt;&#xA;&lt;li&gt;严格帧锁定同步网络差的客户端会影响其他玩家体验（乐观帧锁定同步）&lt;/li&gt;&#xA;&lt;li&gt;不同客户端浮点数精度问题、随机值不统一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;乐观帧锁定&#34;&gt;&#xA;  乐观帧锁定&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b9%90%e8%a7%82%e5%b8%a7%e9%94%81%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;传统严格帧锁定算法会出现慢网影响其他人的情况，此时可以采用定时不等待的方式，服务端以固定帧率同步数据，不依赖每个玩家是否有操作&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;状态同步&#34;&gt;&#xA;  状态同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8a%b6%e6%80%81%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;基本原理-1&#34;&gt;&#xA;  基本原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;计算逻辑在服务端，客户端只表现。状态同步一般都应用RPC调用和增量同步技术&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;状态同步缺陷&#34;&gt;&#xA;  状态同步缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8a%b6%e6%80%81%e5%90%8c%e6%ad%a5%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;延迟过大、服务端压力大&lt;/li&gt;&#xA;&lt;li&gt;状态同步做回放系统较麻烦&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;网络协议&#34;&gt;&#xA;  网络协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;一些基础&#34;&gt;&#xA;  一些基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%9b%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;TCP是流式传输没有固定内容边界，会出现拆包和沾包问题，UDP基于报文有消息边界，不存在拆包沾包问题&lt;/li&gt;&#xA;&lt;li&gt;TCP默认情况下使用Nagle算法，可以优化传输减少网络里的小包数量，传输时协议栈会累积数据直到满足以下条件之一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;积累的数量达到最大MSS&lt;/li&gt;&#xA;&lt;li&gt;收到一个ACK&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TCp默认情况下使用延迟累积ACK发送机制，传输时协议栈会合并多个ACK发送，提高网络性能，直到满足一下条件之一&#xA;&lt;ul&gt;&#xA;&lt;li&gt;累积多个ACK或有数据传输时&lt;/li&gt;&#xA;&lt;li&gt;ACK超时（40ms）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;TCP可以使用&lt;strong&gt;TCP_NODELAY&lt;/strong&gt;来关闭Nagle算法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;网络协议方案&#34;&gt;&#xA;  网络协议方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;可以默认使用TCP，然后再打开使用KCP&#xA;在网络状态较好时可以使用KCP，当出现大量丢包时切换使用TCP&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;同步优化方案&#34;&gt;&#xA;  同步优化方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%8c%e6%ad%a5%e4%bc%98%e5%8c%96%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;表现优化&#34;&gt;&#xA;  表现优化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a1%a8%e7%8e%b0%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;表现优化主要是想弱化玩家对于延迟的感受，主要分为以下一些优化技术&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;1插值优化&#34;&gt;&#xA;  1.插值优化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e6%8f%92%e5%80%bc%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/631954987?utm_id=0&#34;&gt;https://zhuanlan.zhihu.com/p/631954987?utm_id=0&lt;/a&gt;&#xA;状态同步中，由于客户端每次收到都是其他角色的位置信息，为了避免位置突变，客户端会使用插值技术而不是跳帧&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内插值目的是解决客户端离散信息更新导致的突变问题，通过线性插值Lerp插入过渡数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;收到数据包时不能直接应用，必须等到下一个数据包到来才能开始插值，延迟增加&lt;/li&gt;&#xA;&lt;li&gt;运动状态发生剧烈变化时，会丢失部份运动状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228102431.png&#34; src=&#34;https://pic4.zhimg.com/v2-3fea56f86c6bffa3d32ae1681fe9ad73_b.webp&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
