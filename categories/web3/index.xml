<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web3 on Ween&#39;s Blog</title>
    <link>https://weenable.github.io/categories/web3/</link>
    <description>Recent content in Web3 on Ween&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2025 18:59:06 +0800</lastBuildDate>
    <atom:link href="https://weenable.github.io/categories/web3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>区块链相关定义和概念</title>
      <link>https://weenable.github.io/posts/web3/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9B%B8%E5%85%B3%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 28 Feb 2025 18:59:06 +0800</pubDate>
      <guid>https://weenable.github.io/posts/web3/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9B%B8%E5%85%B3%E5%AE%9A%E4%B9%89%E5%92%8C%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h4 class=&#34;heading&#34; id=&#34;1区块链基本架构&#34;&gt;&#xA;  1.区块链基本架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%8c%ba%e5%9d%97%e9%93%be%e5%9f%ba%e6%9c%ac%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据层：描述区块链物理结构&lt;/li&gt;&#xA;&lt;li&gt;网络层：提供节点间数据通信和数据校验&lt;/li&gt;&#xA;&lt;li&gt;共识层：提供节点间达成共识的算法&lt;/li&gt;&#xA;&lt;li&gt;激励层：提供激励措施&lt;/li&gt;&#xA;&lt;li&gt;合约层：提供可编程能力&lt;/li&gt;&#xA;&lt;li&gt;应用层：提供封装区块链技术的应用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;2拜占庭问题和拜占庭容错&#34;&gt;&#xA;  2.拜占庭问题和拜占庭容错&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e6%8b%9c%e5%8d%a0%e5%ba%ad%e9%97%ae%e9%a2%98%e5%92%8c%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;拜占庭问题：存在少数不良节点场景下的一致性达成问题&#xA;拜占庭算法（BFT）：N为节点总数，F为其中不良节点数，当N&amp;gt;=3F+1时问题才有解&#xA;实用拜占庭算法（PBFT）：是第一个广泛采用的BFT算法，采用密码学技术（RSA签名算法、信息摘要算法、信息验证算法）&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;3区块链常见共识算法&#34;&gt;&#xA;  3.区块链常见共识算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%8c%ba%e5%9d%97%e9%93%be%e5%b8%b8%e8%a7%81%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工作量证明POW：通过耗费电力阻止不良行为&lt;/li&gt;&#xA;&lt;li&gt;权益证明POS：代币质押者为验证者，通过绑定验证者和网络的利益来阻止不良行为&lt;/li&gt;&#xA;&lt;li&gt;委托权益证明DPOS：代币持有者对交易验证者进行投票&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;4身份认证&#34;&gt;&#xA;  4.身份认证&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e8%ba%ab%e4%bb%bd%e8%ae%a4%e8%af%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;摘要算法+签名算法&#xA;A：对交易信息进行Hash取摘要，通过私钥加密生成签名&#xA;广播：广播交易信息+A公钥+A生成的签名&#xA;B：对交易信息Hash取摘要，通过A公钥解密签名得到摘要，比对两个摘要&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;5双重支付问题&#34;&gt;&#xA;  5.双重支付问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5%e5%8f%8c%e9%87%8d%e6%94%af%e4%bb%98%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;区块链存在51%攻击的问题，依靠强大的算力篡改区块进行强行分叉。&#xA;可以通过等待若干新块产生后再进行正式交付，来降低51%攻击的可能性&lt;/p&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;6闪电网络&#34;&gt;&#xA;  6.闪电网络&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6%e9%97%aa%e7%94%b5%e7%bd%91%e7%bb%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;比特币交易性能差（全网tps=7左右），同时还需要等待6个块的可行确认（抵御双重支付攻击），导致一笔交易可能要1小时的最终确认&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RSMC（序列到期可撤销合约）：链下通道+链上更新+违约惩罚&lt;/li&gt;&#xA;&lt;li&gt;HTLC（哈希时间锁定合约）：通过合约双方约定接收方提供一个哈希值，在一定时间内有人能提出一个字符串使得哈希后的值与已知值匹配，则转账方将这笔钱转给回答正确的人&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 class=&#34;heading&#34; id=&#34;7软分叉&#34;&gt;&#xA;  7.软分叉&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7%e8%bd%af%e5%88%86%e5%8f%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;定义&#34;&gt;&#xA;  定义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;在区块链协议中，软分叉（Soft Fork）是对现有协议做向后兼容的更改。软分叉的特点是，新规则是现有规则的一个子集，也就是说，遵循旧规则的节点仍然可以理解并处理遵循新规则的区块和交易，但不能创建不符合新规则的区块和交易&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;软分叉状态&#34;&gt;&#xA;  软分叉状态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bd%af%e5%88%86%e5%8f%89%e7%8a%b6%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;软分叉状态指的是区块链网络中软分叉的激活和部署状态。通常，软分叉的激活分为以下几个阶段&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;定义阶段（Defined）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软分叉的代码已经被写入客户端软件，但还没有开始正式监控。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;投票阶段（Started）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;节点开始在区块头中嵌入信号（通过特定的区块版本位）来表示它们是否支持该软分叉。&lt;/li&gt;&#xA;&lt;li&gt;矿工通过在区块头中设置特定的比特位来投票支持或反对这个软分叉。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;锁定阶段（Locked In）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果在一个特定的周期内（例如 2016 个区块）达到了一定的支持率（通常是 95%），软分叉就会进入锁定阶段。&lt;/li&gt;&#xA;&lt;li&gt;在锁定阶段结束后，软分叉将会被激活。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;激活阶段（Active）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;软分叉的规则开始正式生效，所有新创建的区块和交易都必须遵循这些新规则。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;软分叉状态表示区块链网络中软分叉的不同阶段，包括定义、投票、锁定和激活阶段。检查软分叉状态有助于节点决定如何与其他节点进行交互，以确保遵循最新的协议规则，从而提高网络的安全性和数据一致性。例如，在 SegWit 激活后，节点需要与支持 SegWit 的对等节点进行同步，以确保能够完整地验证所有区块链数据&lt;/p&gt;</description>
    </item>
    <item>
      <title>以太坊消息签名</title>
      <link>https://weenable.github.io/posts/web3/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B6%88%E6%81%AF%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Fri, 28 Feb 2025 18:55:39 +0800</pubDate>
      <guid>https://weenable.github.io/posts/web3/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B6%88%E6%81%AF%E7%AD%BE%E5%90%8D/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;签名算法和原理&#34;&gt;&#xA;  签名算法和原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ad%be%e5%90%8d%e7%ae%97%e6%b3%95%e5%92%8c%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以太坊使用椭圆曲线加密算法ECDSA来进行交易签名&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;密钥生成：生成私钥和公钥，私钥用于签名，公钥用于验证签名&lt;/li&gt;&#xA;&lt;li&gt;交易签名：使用私钥对原始消息进行签名&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对交易使用RLP（递归长度前缀编码）编码序列化&lt;/li&gt;&#xA;&lt;li&gt;使用keccka256哈希函数对编码后的交易进行计算&lt;/li&gt;&#xA;&lt;li&gt;使用私钥对哈希值进行签名，生成r、s、v值&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;签名验证：使用公钥以及原始消息来验证签名的有效性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;验证签名代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;IsValidOrderSignature&lt;/span&gt;(address &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;, message &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;, sign &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;bool&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ethMessage := []&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;\x19Ethereum Signed Message:\n&amp;#34;&lt;/span&gt; + strconv.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Itoa&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(message)) + message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;hash := crypto.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Keccak256&lt;/span&gt;(ethMessage)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sigBytes := hexutil.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;MustDecode&lt;/span&gt;(sign)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; sigBytes[64] == 27 || sigBytes[64] == 28 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;sigBytes[64] -= 27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;pubKey, err := crypto.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SigToPub&lt;/span&gt;(hash, sigBytes)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;recAddress := crypto.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;PubkeyToAddress&lt;/span&gt;(*pubKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;recStr := strings.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;ToLower&lt;/span&gt;(recAddress.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; recStr == strings.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;ToLower&lt;/span&gt;(address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>P2P核心技术：Kad分布式路由表算法</title>
      <link>https://weenable.github.io/posts/web3/p2p%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFkad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 28 Feb 2025 18:51:48 +0800</pubDate>
      <guid>https://weenable.github.io/posts/web3/p2p%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AFkad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h3 class=&#34;heading&#34; id=&#34;简介&#34;&gt;&#xA;  简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Kademlia（Kad）是分布式散列表（DHT）算法的一种，是去中心化P2P网络最核心的一种路由寻址技术，可以在无中心服务器（trackerless）的情况下，在网络中快速找到目标节点&lt;/p&gt;&#xA;&lt;p&gt;早期中心化服务器BtTorrent网络，需要种子服务器来帮助节点之间发现&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252285241628.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-20252285241628.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;实现Kad协议的P2P网络，每个节点维护一个路由表，仅记录离自己最近的一些节点信息，通过迭代查询来发现其他节点&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-2025228534197.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-2025228534197.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;核心内容&#34;&gt;&#xA;  核心内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%b8%e5%bf%83%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Node ID：P2P网络中，节点通过唯一的ID来进行标识，在原始Kad算法中，使用160bit哈希空间来作为Node ID&lt;/li&gt;&#xA;&lt;li&gt;Node Distance：每个节点保存自己附近的节点信息，是通过计算得到的逻辑距离来判断的（通过把两个节点的Node ID进行XOR运算，结果越小距离越近）&lt;/li&gt;&#xA;&lt;li&gt;K-Bucket：用一个Bucket来保存与当前节点距离在某个范围内的所有节点列表&lt;/li&gt;&#xA;&lt;li&gt;Bucket分裂：如果原始Bucket数量不够，需要进行分裂&lt;/li&gt;&#xA;&lt;li&gt;Routing Table：记录所有Bucket，每个bucket限制最多k个节点，如下图所示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252285349459.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-20252285349459.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Update：在节点bootstrap时，需要把连接上的节点更新到自己的routing table中&lt;/li&gt;&#xA;&lt;li&gt;LookUp：查找节点，找到与目标节点最近的bucket，如果目标节点在bucket中则直接范围，否则往bucket中节点发送查询请求，这些节点继续迭代查询&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;详细内容&#34;&gt;&#xA;  详细内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%a6%e7%bb%86%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;1node-id&#34;&gt;&#xA;  1.Node ID&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1node-id&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;Kad使用SHA1哈希来计算Node ID，SHA1是一个160bit（20字节）的哈希空间&#xA;IPFS使用SHA256哈希来计算Node ID，256bit（32字节）的哈希空间&#xA;eth使用SHA3，也是256bit哈希空间&lt;/p&gt;&#xA;&lt;h5 class=&#34;heading&#34; id=&#34;2node-distance和xor&#34;&gt;&#xA;  2.Node Distance和XOR&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2node-distance%e5%92%8cxor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;p&gt;对两个Node ID进行XOR运算，可以得出他们之间的距离&#xA;Kad中，根据当前节点和其他节点的Node ID匹配的最多的bit个数来构建一棵二叉树，这里匹配的bit数也叫LCP(longest common prefix)，按照LCP来划分子树&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;image-20252285458639.png&#34; src=&#34;images/P2P%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%9AKad%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1%E8%A1%A8%E7%AE%97%E6%B3%95/image-20252285458639.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;对于160bit空间的Node ID来说，一共会有160颗子树，也就是160个bucket&#xA;Kad要求每个节点知道其各子树的至少一个节点&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
